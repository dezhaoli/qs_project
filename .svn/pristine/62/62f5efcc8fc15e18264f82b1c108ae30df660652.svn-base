package com.qs.log.game.service.impl;

import com.qs.log.game.mapper.TaxesInviteMapper;
import com.qs.log.game.model.TaxesInvite;
import com.qs.log.game.service.ITaxesInviteService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * Created by zun.wei on 2017/3/18.
 * To change this template use File|Default Setting
 * |Editor|File and Code Templates|Includes|File Header
 */
@Service
public class TaxesInviteServiceImpl implements ITaxesInviteService {

    @Resource
    private TaxesInviteMapper taxesInviteMapper;

    @Value("${game.gameCode}")
    private String dbName;

    @Override
    public int insert(TaxesInvite record) {
        return taxesInviteMapper.insert(record);
    }

    @Override
    public int insertSelective(TaxesInvite record) {
        return taxesInviteMapper.insertSelective(record);
    }

    @Override
    public Map<String, Object> getPayAndInviteTotalByMid(Integer mid) {
        return taxesInviteMapper.getPayAndInviteTotalByMid(mid);
    }

    @Override
    public Map<String, Object> getPayAndInviteTotalByParentId(Integer parentId) {
        return taxesInviteMapper.getPayAndInviteTotalByParentId(parentId);
    }

    @Override
    public Map<String, Object> getPayAndInviteTotalByAgentParentId(Integer agentParentId) {
        Map<String, Object> map = new HashMap<String, Object>();
        /*if (websideUrl != null) {
            int start = websideUrl.lastIndexOf("/");
            int offset = websideUrl.lastIndexOf("?");
            String dbName = websideUrl.substring(start + 1, offset);
            map.put("dbName", dbName + ".memberagents");
        } else {
            map.put("dbName", "sc_majiang.memberagents");
        }*/
        map.put("dbName", dbName + ".memberagents");
        map.put("agentParentId", agentParentId);
        return taxesInviteMapper.getPayAndInviteTotalByAgentParentId(map);
    }

	@Override
	public Map<String, Integer> getPayTempInviteCountByTime(Map<String, Object> param) {
		Map<String, Integer> result=null;
        param.put("DBName", dbName + ".memberagents");
		result=taxesInviteMapper.getPayTempInviteCountByTime(param);
		
		Object firpay= result.get("firpay");
		Object secpay=result.get("secpay");
		Object thdpay=result.get("thdpay");
		Integer count=Integer.valueOf( 
				firpay.toString())+Integer.valueOf( secpay.toString())+Integer.valueOf( thdpay.toString());
		result.put("count",count);
		
		return result;
	}

    @Override
    public List<Map<String, Object>> getAgentTeamPayChangeCountByDate(Map<String, Object> parameters) {
        parameters.put("memberagents", dbName + ".memberagents");
        parameters.put("common_agents_info", dbName + ".common_agents_info");
        return taxesInviteMapper.getAgentTeamPayChangeCountByDate(parameters);
    }

    @Override
    public Double getAgentUnderBusinessChangeCountByDate(Map<String, Object> parameters) {
        parameters.put("memberagents", dbName + ".memberagents");
        return taxesInviteMapper.getAgentUnderBusinessChangeCountByDate(parameters);
    }

    @Override
    public List<Map<String, Object>> agentTeamRechargeStatistics(Map<String, Object> parameters) {
        List<Map<String, Object>> list = new ArrayList<>();
        Map<String, Object> map = new HashMap<>();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        if ("".equals(parameters.get("starDate"))) parameters.put("starDate", simpleDateFormat.format(new Date()));
        if ("".equals(parameters.get("endDate"))) parameters.put("endDate", simpleDateFormat.format(new Date()));
        List<Map<String, Object>> data = getAgentTeamPayChangeCountByDate(parameters);

        if (data != null && data.size() < 1) return new ArrayList<Map<String, Object>>();
        Double totalPayCount = getAgentUnderBusinessChangeCountByDate(parameters);
        Double totalPagePay = 0.0;
        for (Map<String, Object> datum : data) {
            Double pay = Double.parseDouble(datum.get("totalpay") + "");
            totalPagePay += pay;
        }
        for (Map<String, Object> datum : data) {
            datum.put("totalPagePay", totalPagePay);
            datum.put("totalPayCount", totalPayCount);
            list.add(datum);
        }
        return list;
    }


}
