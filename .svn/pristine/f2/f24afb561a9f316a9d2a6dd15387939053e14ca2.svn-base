package com.qs.common.util;

/**
 * Created by zun.wei on 2017/3/3.
 * To change this template use File|Default Setting
 * |Editor|File and Code Templates|Includes|File Header
 */
public class SocketPacket {

    private static Integer PACKET_BUFFER_SIZE = 8192;
    private static Integer PACKET_HEADER_SIZE = 6;

    private StringBuffer packetBuffer;
    private Integer packetSize;
    private Integer cmdType;
    private String checkCode;
    private StringBuffer content = new StringBuffer("");

    //private $packetBuffer;
    //private $packetSize;
    //private $m_CmdType;
    //private $m_cbCheckCode;

    /**
     * 将int转为低字节在前，高字节在后的byte数组
     */
    private static byte[] toLH(int n) {
        byte[] b = new byte[4];
        b[0] = (byte) (n & 0xff);
        b[1] = (byte) (n >> 8 & 0xff);
        b[2] = (byte) (n >> 16 & 0xff);
        b[3] = (byte) (n >> 24 & 0xff);
        return b;
    }

    public SocketPacket() {
        this.packetSize = 0;
        this.packetBuffer = new StringBuffer("");
    }

    public void WriteBegin(Integer cmdType) {
        this.cmdType = cmdType;
    }

    public void WriteEnd() {
        content.append("QS");
        content.append(toLH(this.packetSize));
        content.append(toLH(this.cmdType));
        packetBuffer.append(content);

        //$content .= pack("s", $this->packetSize);			//len
        //$content .= pack("s", $this->m_CmdType);			//cmd
        //$this->packetBuffer = $content . $this->packetBuffer;
    }

    public void WriteInt(Integer value) {
        this.packetBuffer.append(toLH(value));
        this.packetSize += 4;
        //$this->packetBuffer .= pack("i", $value);
        //$this->packetSize += 4;
    }

   /* public function GetPacketBuffer() {
        return $this->packetBuffer;
    }*/

}
