package com.qs.webside.agent.controller;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.shiro.SecurityUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.qs.common.base.basecontroller.BaseController;
import com.qs.common.constant.CommonContants;
import com.qs.common.dtgrid.model.Pager;
import com.qs.common.exception.AgentemException;
import com.qs.common.util.CommonUtils;
import com.qs.common.util.DateUtil;
import com.qs.common.util.PageUtil;
import com.qs.log.game.model.TaxesDirectlyWeek;
import com.qs.log.game.model.TaxesInvite;
import com.qs.log.game.service.ITaxesInviteService;
import com.qs.log.game.service.impl.TaxesDirectlyWeekServiceImpl;
import com.qs.webside.agent.service.IMemberAgentService;
import com.qs.webside.agent.service.IMemberPayMentService;
import com.qs.webside.agent.service.ITaxesInviteWeekMapperService;
import com.qs.webside.member.model.MemberAgents;
import com.qs.webside.member.model.MemberPayMent;
import com.qs.webside.util.AgentUtil;
	
@Controller
@RequestMapping(value = "/agentroom")
public class AgentRoomController extends BaseController{

	@Value("${high.scale}")
	private String highScale;

	@Value("${middle.scale}")
	private String middleScale;
	
	
	@Value("${low.scale}")
	private String lowScale;
	
	@Value("${game.roule.team1}")
	private String team1;
	
	@Value("${game.roule.team2}")
	private String team2;
	
	
	@Autowired
	private IMemberAgentService memberAgentService;
	
	@Autowired
	private IMemberPayMentService memberPayMentService;
	
	@Autowired
	private ITaxesInviteWeekMapperService taxesInviteWeekMapperService;
	
	@Autowired
	private ITaxesInviteService taxesInviteService;
	
	@Autowired
	private TaxesDirectlyWeekServiceImpl taxesDirectlyWeekService;
	
	/**
	 * 代理商须知
	 * @param model
	 * @param req
	 * @return
	 */
	@RequestMapping(value = "instructions.html")
	public String agentinstructions(Model model,HttpServletRequest req){
		
		return "WEB-INF/view/web/agent/query/agent_instructions_list";
	}
	
	/**
	 * 团队充值统计
	 * @param model
	 * @param req
	 * @return
	 */
	@RequestMapping(value = "teamrechargecount.html")
	public String teamrechargecount(Model model,HttpServletRequest req,HttpSession session,Date startTime,Date endTime){
		
		Map<String ,Integer > resutl=new HashMap<String,Integer>();
		Map<String,Object> parma=new HashMap<String,Object>();
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
		MemberAgents memberAgents = (MemberAgents)SecurityUtils.getSubject().getPrincipal();
		parma.put("mid",memberAgents.getParentId() );
		if(startTime !=null) {
			parma.put("sdate",startTime );
		}else {
			parma.put("sdate",sdf.format(new Date()) );
		}
		if(endTime !=null) {
			parma.put("edate",endTime );
		}else {
			parma.put("edate", sdf.format(new Date()));
		}
		resutl=memberAgentService.getTaxesInviteMapper(parma);
		model.addAttribute("resultMap", resutl);
		return "WEB-INF/view/web/agent/query/team_recharge_count_form";
	}
	
	/**
	 * 根据时间断查询团队充值情况
	 * 开始时间与结束时间
	 * @param model
	 * @param req
	 * @param session
	 * @param startTime
	 * @param endTime
	 */
	@ResponseBody
	@RequestMapping(value = "teamrechargecountbytime.html")
	public Map<String,Object> selectTeamrechargecountByTime(Model model,HttpServletRequest req,
			  Date startTime, Date endTime){
		
		Map<String ,Object > resutl=new HashMap<String,Object>();
		try {

			Map<String ,Integer > data=new HashMap<String,Integer>();
			Map<String,Object> parma=new HashMap<String,Object>();
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
			//startTime=sdf.parse(req.getParameter("startTime"));

			MemberAgents memberAgents = (MemberAgents)SecurityUtils.getSubject().getPrincipal();
			parma.put("mid",memberAgents.getParentId() );
			if(startTime !=null) {
				parma.put("sdate",sdf.format(startTime) );
			}else {
				parma.put("sdate",sdf.format(new Date()) );
			}
			if(endTime !=null) {
				parma.put("edate",sdf.format(endTime) );
			}else {
				parma.put("edate", sdf.format(new Date()));
			}
			data=memberAgentService.getTaxesInviteMapper(parma);
			resutl.put("data", data);
			resutl.put(CommonContants.SUCCESS,CommonContants.SUCCESS);
		} catch (Exception e) {
			resutl.put(CommonContants.ERROR,CommonContants.ERROR);
			resutl.put(CommonContants.OPERATE_FAILURE,CommonContants.OPERATE_FAILURE);
			throw new AgentemException(e);
		}
		return resutl;
	}
	
	/**
	 * 充值明细
	 * @param model
	 * @param req
	 * @param startTime
	 * @param endTime
	 * @param type
	 * @return
	 */
	@RequestMapping(value = "teamquerydetail.html")
	public String showPayDetail(Model model,HttpServletRequest req,
			String startTime, String endTime,String type){
		Map<String,String> parma=new HashMap<String,String>();
		parma.put("startTime", startTime);
		parma.put("endTime", endTime);
		parma.put("type", type);
		PageUtil page = new PageUtil(req);
        model.addAttribute("page", page);
        model.addAttribute("parma", parma);
		return "/WEB-INF/view/web/agent/query/team_recharge_detail_list";
	}

	/**
	 * 团队充值明细
	 * @param gridPager
	 * @return
	 * @throws Exception
	 */
	@ResponseBody
	@RequestMapping("teamquerydetailInfo.html")
	public Object teamquerydetailInfo(String gridPager) throws Exception {

		try {


			Map<String, Object> parameters = null;
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
			// 映射Pager对象
			Pager pager = JSON.parseObject(gridPager, Pager.class);
			// 判断是否包含自定义参数
			parameters = pager.getParameters();
			// 设置分页，page里面包含了分页信息
			MemberAgents memberAgents = (MemberAgents)SecurityUtils.getSubject().getPrincipal();
			parameters.put("mid",memberAgents.getParentId() );

			if (parameters.containsKey("startTime")){
				Object startTime=parameters.get("startTime");
				if (startTime ==null) {
					parameters.put("startTime", sdf.format(new Date()));
				}
			}

			if (parameters.containsKey("endTime")){
				Object startTime=parameters.get("endTime");
				if (startTime ==null) {
					parameters.put("endTime", sdf.format(new Date()));
				}
			}
			Page<Object> page = PageHelper.startPage(pager.getNowPage(), pager.getPageSize());
			List<MemberPayMent> list = memberPayMentService.queryListByPage(parameters);
			return getReturnPage(pager, page, list);
		} catch (Exception e) {
			throw new AgentemException(e);
		}
	}
	
	/**
	 * 团队周结算list 表初始化
	 * @param model
	 * @param req
	 * @return
	 */
	@RequestMapping("teamWeekSttlement.html")
	public String teamWeekSttlement(Model model,HttpServletRequest req){
		    Map<String, List<String>> date;
			
			Map<String, Object> parameters = new HashMap<>();
		 try {
			 date = DateUtil.getAgentInfoDateTime();
			 String json = JSON.toJSONString(date);
			 List<String> keys = new ArrayList<String>();
			 Set<String> keySet = date.keySet();
			 Iterator<String> ki = keySet.iterator();
			 while (ki.hasNext()) {
				 String key = ki.next();
				 keys.add(key.substring(1));
			 }
			 parameters.put("mid", AgentUtil.getAgentMid());
			 
			 Map<String, Object> taxesInviteWeekMap= taxesInviteWeekMapperService.selectByIdTexesInviteWeek(parameters);
			 model.addAttribute("years", keys);
			 model.addAttribute("jsonDate", json);
			 model.addAttribute("rouleParam", getRouleParam());
			 model.addAttribute("data", taxesInviteWeekMap);
		 } catch (Exception e) {
			throw new AgentemException(e);
		}
		return "WEB-INF/view/web/agent/query/teamweeksttlement_list";
	}
	
	/**
	 * 团队充值明细submit查询按钮
	 * @param model
	 * @param req
	 * @param time
	 */
	@RequestMapping("teamWeekSttlementSubmit.html")
	@ResponseBody
	public void teamWeekSttlementSubmit(Model model,HttpServletRequest req,String time){
		
		Map<String, Object> parameters = new HashMap<>();
		 try {
			 
			 parameters.put("mid", AgentUtil.getAgentMid());
			 if (!time.isEmpty()){
				 parameters.put("date", time);
			 }
			 Map<String, Object> taxesInviteWeekMap= taxesInviteWeekMapperService.selectByIdTexesInviteWeek(parameters);
			 model.addAttribute("data", taxesInviteWeekMap);
		 } catch (Exception e) {
			 model.addAttribute(CommonContants.OPERATE_FAILURE, CommonContants.OPERATE_FAILURE);
			throw new AgentemException(e);
		}
	}
	
	
	/**
	 * 设置游戏团队规则参数
	 * @return
	 */
	public Map<String ,String> getRouleParam (){
		
		Map<String ,String> rouleParam=new HashMap<String,String>();
		
		rouleParam.put("highScale", highScale);
		
		rouleParam.put("middleScale", middleScale);
		
		rouleParam.put("lowScale", lowScale);
		
		rouleParam.put("team1", team1);
		rouleParam.put("team2", team2);
		return rouleParam;
	}
	@RequestMapping(value = "submitTaxesInviteUi.html")
	public String submitTaxesInviteUi(Model model,HttpServletRequest req,
			 String endTime,String type){
		
		
			Map<String,Object> parma=new HashMap<String,Object>();
			parma.put("endTime", endTime);
			parma.put("type", type);
			PageUtil page = new PageUtil(req);
	        model.addAttribute("page", page);
	        model.addAttribute("parma", parma);
	        return "/WEB-INF/view/web/agent/query/team_settle_detail_list";
	}
	/**
	 * 团队周结算查询列表清单
	 * @param gridPager
	 * @return
	 * @throws Exception
	 */
    @ResponseBody
    @RequestMapping("submitTaxesInviteDayList.html")
    public Object submitTaxesInviteDayList(String gridPager) throws Exception {
		
		try {
			
			Map<String, Object> parameters = null;
		
			// 映射Pager对象
			Pager pager = JSON.parseObject(gridPager, Pager.class);
			// 判断是否包含自定义参数
			parameters = pager.getParameters();
			if (parameters.size() < 0) {
				return null;//如果没有mid传过来则不执行查询。
			}
			String time=parameters.get("endTime").toString();
			if ("".equals(time)){
				//time=DateUtil.convert2String(new Date().getTime());
				parameters.put("satrtDate", "");
			}else {
				parameters.put("satrtDate", CommonUtils.getEndDate(time, 7));
			}
			parameters.put("mid", AgentUtil.getAgentMid());

			// 设置分页，page里面包含了分页信息
			Page<Object> page = PageHelper.startPage(pager.getNowPage(), pager.getPageSize());

			List<TaxesInvite> list= taxesInviteService.selectByIdTexesInviteDay(parameters);
			return getReturnPage(pager, page, list);
		} catch (Exception e) {
	          throw new AgentemException(e);
		}
    }
    
    /**
     * 直属会员周信息统计
     * @param model
     * @param req
     * @return
     */
    @RequestMapping("vipWeekDataStat.html")
    public String vipWeekDataStat(Model model,HttpServletRequest req){

    	Map<String, List<String>> date;
    	Map<String, Object> parameters = new HashMap<>();
    	
    	try {
    		
    		date = DateUtil.getAgentInfoDateTime();
    		String json = JSON.toJSONString(date);
    		List<String> keys = new ArrayList<String>();
    		Set<String> keySet = date.keySet();
    		Iterator<String> ki = keySet.iterator();
    		
    		while (ki.hasNext()) {
    			String key = ki.next();
    			keys.add(key.substring(1));
    		}
    		parameters.put("mid", AgentUtil.getAgentMid());
    		
    		TaxesDirectlyWeek taxesInviteWeekMap= taxesDirectlyWeekService.selectVipNotWeekData(parameters);
    		model.addAttribute("years", keys);
    		model.addAttribute("jsonDate", json);
    		model.addAttribute("data", taxesInviteWeekMap);
    	} catch (Exception e) {
    		throw new AgentemException(e);
    	}
    	return "/WEB-INF/view/web/agent/query/team_vipWeekDataStat_show";
    }
    
    /**
     * 直属会员周信息统计根据时间查询
     * @param model
     * @param req
     */
    @RequestMapping("vipWeekDataStatQuery.html")
    public void vipWeekDataStatQuery(Model model,HttpServletRequest req,String data){

    	Map<String, Object> parameters = new HashMap<>();
    	try {
    		parameters.put("mid", AgentUtil.getAgentMid());
    		parameters.put("data", data);
    		TaxesDirectlyWeek taxesInviteWeekMap= taxesDirectlyWeekService.selectVipNotWeekData(parameters);
    		model.addAttribute("data", taxesInviteWeekMap);
    	} catch (Exception e) {
    		throw new AgentemException(e);
    	}
    }
}
