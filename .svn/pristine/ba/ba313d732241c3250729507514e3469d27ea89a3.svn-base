package com.qs.webside.api.controller;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import com.qs.common.base.basecontroller.BaseController;
import com.qs.common.constant.AppConstants;
import com.qs.common.ip2region.DbSearcher;
import com.qs.common.util.CommonUtils;
import com.qs.common.util.IpUtil;
import com.qs.log.game.model.GameRecordShare;
import com.qs.log.game.model.RoomRecord;
import com.qs.log.game.service.GameRecordService;
import com.qs.webside.api.model.BaseRequest;
import com.qs.webside.api.model.GameRecordRequest;
import com.qs.webside.api.model.GameRecordShareRequest;
import com.qs.webside.api.model.HonorDetailRequest;
import com.qs.webside.api.model.MemberInviteRequest;
import com.qs.webside.api.model.RoomRecordRequest;
import com.qs.webside.game.model.Memberinvite;
import com.qs.webside.game.model.MobileVersion;
import com.qs.webside.game.service.GameService;
import com.qs.webside.member.model.Game;
import com.qs.webside.member.model.Memberfides;
import com.qs.webside.member.service.MemberService;
import com.qs.webside.util.AccessToken;
import com.qs.webside.util.ContextUtil;

@Controller
@Scope("prototype")
@RequestMapping("/api/")
public class GameController extends BaseController {
	
	Logger log = Logger.getLogger(GameController.class);  


    @Value("${game.gametype}")
    private int gameType;
	
	@Autowired
	private GameRecordService gameRecordService;
	@Autowired
	private DbSearcher ipSearcher;
	@Autowired
	private MemberService memberService;
	

	

	/***
	 * 获取牌局回放数据
	 * @param roomRecordRequest
	 * @return
	 */
	@RequestMapping("getPaiJuData.do")
	@ResponseBody
	public Object getPaiJuData(RoomRecordRequest roomRecordRequest){
		log.debug(roomRecordRequest.toString());
		
		RoomRecord roomRecord=new RoomRecord();
		roomRecord.setUuid(roomRecordRequest.getUuid());
		roomRecord.setType(gameType);
		Map<String, Object> map = new HashMap<String, Object>();
		gameRecordService.getPaiJuData(roomRecord);
		 return this.getReturnData(map,AppConstants.Result.SUCCESS);
	}

    /**
     * 获取分享的牌局的数据
     * @param roomRecordRequest
     * @return
     */
	@RequestMapping("getShareGameRecord.do")
	@ResponseBody
	public Object getShareGameRecord(GameRecordShareRequest shareRequest){
		log.debug(shareRequest.toString());
		
		Map<String, Object> resultMap = new HashMap<String, Object>();
		Map<String, Object> shareMap=gameRecordService.getShareGameRecord(shareRequest.getId());
		resultMap.put("arr", shareMap);
	   return this.getReturnData(resultMap,AppConstants.Result.SUCCESS);
	}
	
	/**
	 * 分享牌局(创建并返回分享ID)
	 * @param shareRequest
	 * @return
	 */
	@RequestMapping("shareGameRecord.do")
	@ResponseBody
	public Object shareGameRecord(GameRecordShareRequest shareRequest){
		log.debug(shareRequest.toString());
		
		Map<String, Object> resultMap = new HashMap<String, Object>();
		AccessToken token=ContextUtil.getAccessTokenInfo(shareRequest.getSesskey());
		GameRecordShare record=new GameRecordShare();
		record.setMid(token.getMid());
		record.setRecordid(shareRequest.getRecordid());
		
		int c=gameRecordService.addGameRecordShare(record);
		int code=record.getSid();
		resultMap.put("code", code);
	    return this.getReturnData(resultMap,AppConstants.Result.SUCCESS);
	}
	
	
	/**
     * 获取详细战绩
     * @param roomRecordRequest
     * @return
     */
	@RequestMapping("getHonorDetail.do")
	@ResponseBody
	public Object getHonorDetail(HonorDetailRequest honorDetailRequest){
		log.debug(honorDetailRequest.toString());
		
		Map<String, Object> resultMap = new HashMap<String, Object>();
		AccessToken token=ContextUtil.getAccessTokenInfo(honorDetailRequest.getSesskey());
		 List<Object>  detailMap=gameRecordService.getHonorDetail(token.getMid(),honorDetailRequest.getIds());
		resultMap.put("arr", detailMap);
	   return this.getReturnData(resultMap,AppConstants.Result.SUCCESS);
	}
	
	/**
	 * 获取当前IP
	 * @param baseRequest
	 * @param request
	 * @return
	 */
	@RequestMapping("getIP.do")
	@ResponseBody
	public Object getIP(BaseRequest baseRequest,HttpServletRequest request){
		log.debug(baseRequest.toString());
		
		Map<String, Object> resultMap = new HashMap<String, Object>();
		String ip = IpUtil.getIpAddr(request);
		String region="";
		try {
			region = ipSearcher.memorySearch(ip).getRegion();
		} catch (IOException e) {
			e.printStackTrace();
		}
		String[] regions = StringUtils.split(region, '|');
		resultMap.put("ip",ip);
		resultMap.put("city",regions[2]+regions[3]+regions[4]);
	   return this.getReturnData(resultMap,AppConstants.Result.SUCCESS);
	}
	
	/**
	 * 获取我的战绩
	 * @param baseRequest
	 * @param request
	 * @return
	 */
	@RequestMapping("getGameRecord.do")
	@ResponseBody
	public Object getGameRecord(GameRecordRequest gameRecordRequest ,HttpServletRequest request){
		log.debug(gameRecordRequest.toString());
		
		Map<String, Object> resultMap = new HashMap<String, Object>();
		Map<String, Object> parameter = new HashMap<String, Object>();
		int pageNum=gameRecordRequest.getPage();
		if(pageNum<1){
			pageNum=1;
		}
        int pageSize=10;
		int startRow=(pageNum-1)*pageSize;
		parameter.put("pageSize",pageSize);
		parameter.put("startRow",startRow);
	
		List<Object> listResult=gameRecordService.queryGameRecordListByPage(parameter);
		AccessToken token=ContextUtil.getAccessTokenInfo(gameRecordRequest.getSesskey());
		Game game=memberService.findGameById(token.getMid());
		
		resultMap.put("arr", listResult);
		resultMap.put("jifen",game.getJifen());
	
	   return this.getReturnData(resultMap,AppConstants.Result.SUCCESS);
	}
	
}
