/*
 * 文件名：UserKeepController.java	 
 * 时     间：上午10:36:53
 * 作     者：wangzhen      
 * 版     权：2014-2022  牵手互动, 公司保留所有权利.
 * 
 */
package com.qs.pub.datacenter.controller;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.SecurityUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.qs.common.base.basecontroller.BaseController;
import com.qs.common.dtgrid.model.Pager;
import com.qs.common.dtgrid.util.ExportUtils;
import com.qs.constant.Constant;
import com.qs.pub.datacenter.model.UserKeep;
import com.qs.pub.datacenter.service.IUserKeepService;
import com.qs.pub.sys.model.UserEntity;

/** 
 * @ClassName: UserKeepController 
 * @描述: (这里用一句话描述这个类的作用) 
 * @author qs
 * @date 2017年6月30日 上午10:36:53 
 */
@RequestMapping("/userKeep/")
@Controller
public class UserKeepController extends BaseController
{
	@Resource
	private IUserKeepService userKeepService;
	@Autowired
	private RedisTemplate<String,String> redisTemplate;
	@RequestMapping("toQueryUserKeepListUi.html")
	public String toQueryUserKeepListUi(){
		return "WEB-INF/view/web/user/user_keep_list";
	}
	@RequestMapping("queryUserKeepList.html")
	@ResponseBody
	public Object queryUserKeepList(String gridPager,HttpServletResponse response){
		try
		{
			ValueOperations<String, String> valueOper = redisTemplate
					.opsForValue();
			UserEntity userEntity = (UserEntity) SecurityUtils.getSubject()
					.getPrincipal();
			String gameCode = valueOper.get(Constant.DATA_CENTER_GAME_CODE + userEntity.getId());
			Map<String, Object> parameters = null;
			// 映射Pager对象
			Pager pager = JSON.parseObject(gridPager, Pager.class);
			// 判断是否包含自定义参数
			parameters = pager.getParameters();
			parameters.put("gameCode", gameCode);
			if (pager.getIsExport())
			{
				if (pager.getExportAllData())
				{
					// 3.1、导出全部数据
					List<UserKeep> list = userKeepService
							.queryUserKeepList(parameters);
					ExportUtils.exportAll(response, pager, list);
					return null;
				} else
				{
					// 3.2、导出当前页数据
					ExportUtils.export(response, pager);
					return null;
				}
			} else
			{
				// 设置分页，page里面包含了分页信息
				Page<Object> page = PageHelper.startPage(pager.getNowPage(),
						pager.getPageSize());
				List<UserKeep> list = userKeepService
						.queryUserKeepList(parameters);
				return getReturnPage(pager, page, list);
			}
		}catch(Exception e){
			e.printStackTrace();
		}
	return null;
	}
}
