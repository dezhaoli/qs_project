package com.qs.webside.activity.controller;

import com.qs.common.base.basecontroller.BaseController;
import com.qs.common.constant.AppConstants;
import com.qs.common.util.DateUtils;
import com.qs.webside.activity.model.ActiAward;
import com.qs.webside.activity.model.ActiAwardAddress;
import com.qs.webside.activity.model.ActiAwardRecord;
import com.qs.webside.activity.model.ActiIntegral;
import com.qs.webside.activity.service.IActiAwardAddressService;
import com.qs.webside.activity.service.IActiAwardRecordService;
import com.qs.webside.activity.service.IActiAwardService;
import com.qs.webside.activity.service.IActiIntegralService;
import com.qs.webside.api.model.BaseRequest;
import com.qs.webside.util.AccessToken;
import com.qs.webside.util.ContextUtil;
import org.apache.commons.lang.StringUtils;
import org.springframework.dao.support.DataAccessUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

/**
 * Created by zun.wei on 2017/6/7 15:21.
 * Description:活动中心奖品兑换记录表
 */
@Controller
@RequestMapping(value = "/api/actiAwardRecord/")
public class ActiAwardRecordController extends BaseController {

    @Resource
    private IActiAwardRecordService actiAwardRecordService;

    @Resource
    private IActiAwardService actiAwardService;

    @Resource
    private IActiIntegralService actiIntegralService;

    @Resource
    private IActiAwardAddressService actiAwardAddressService;

    /**
     * @param model
     * @param request
     * @param baseRequest
     * @return
     * @Author:zun.wei , @Date:2017/6/8 13:59
     * @Description:活动中心积分兑换奖品接口
     */
    @RequestMapping("exchangePrizes.do")
    @ResponseBody
    public Object addExchangePrizes(HttpServletRequest request,  BaseRequest baseRequest) {
        int id = Integer.valueOf(request.getParameter("id"));
        int number = Integer.valueOf(request.getParameter("number"));//兑换个数默认1
        AccessToken token = ContextUtil.getAccessTokenInfo(baseRequest.getSesskey());
        ActiAwardRecord actiAwardRecord = new ActiAwardRecord();
        ActiAward actiAward = actiAwardService.selectByIdLimitByActiTime(id);//奖品(如果活动时间截止，就查询不到商品)
        if (actiAward == null) return this.getReturnData(-105, AppConstants.Result.FAILURE);
        ActiAwardAddress actiAwardAddress = actiAwardAddressService.selectByMidKey(token.getMid());
        if (actiAwardAddress == null) return this.getReturnData(-104, AppConstants.Result.FAILURE);
        Map<String, Object> parameterMap = new HashMap<>();
        parameterMap.put("actiType", actiAward.getType());
        parameterMap.put("awardId", actiAward.getId());
        long hashExAwards = actiAwardRecordService.checkAwardRecordSumByActiType(parameterMap);//已兑换奖品个数
        long awards = actiAward.getAwardNum();//奖品总数
        if (number < 1) return this.getReturnData(-106, AppConstants.Result.FAILURE);
        if ((awards - hashExAwards) >= number) {//判断奖品数量是否充足
            ActiIntegral actiIntegral = actiIntegralService.selectByMid(token.getMid());
            if (actiIntegral != null) {
                long nowIntegral = actiIntegral.getNowIntegral();
                long needIntegral = actiAward.getIntegral();
                if (nowIntegral >= needIntegral * number) {//比较现存积分与需要的积分值
                    long usedIntegral = actiIntegral.getUsedIntegral();
                    nowIntegral = nowIntegral - needIntegral * number;
                    usedIntegral = usedIntegral + needIntegral * number;
                    actiIntegral.setNowIntegral(nowIntegral);
                    actiIntegral.setUsedIntegral(usedIntegral);
                    int resultAddIntegral = actiIntegralService.updateByPrimaryKey(actiIntegral);
                    if (resultAddIntegral > 0) {//更新积分成功
                    	actiAwardRecord.setMid(token.getMid());
                    	actiAwardRecord.setAwardId(id);
                    	actiAwardRecord.setName(actiAward.getName());
                    	actiAwardRecord.setIntegral(actiAward.getIntegral()*number);
                    	actiAwardRecord.setAwardNum(Long.parseLong(number+""));
                    	actiAwardRecord.setIsReview(actiAward.getReview());
                    	actiAwardRecord.setType(actiAward.getType());
                    	actiAwardRecord.setCreateTime(new Date());
                        int result = actiAwardRecordService.insertSelective(actiAwardRecord);
                        if (result > 0) {//插入奖品兑换记录表成功
                            return this.getReturnData(result, AppConstants.Result.SUCCESS);
                        } else {//插入奖品兑换记录表失败
                            return this.getReturnData(-107, AppConstants.Result.FAILURE);
                        }
                    } else {//更新积分失败
                        return this.getReturnData(-108, AppConstants.Result.FAILURE);
                    }
                } else {//积分不足
                    return this.getReturnData(-109, AppConstants.Result.FAILURE);
                }
            } else {//当前人没有积分对象
                return this.getReturnData(-110, AppConstants.Result.FAILURE);
            }
        } else {//奖品不足
            return this.getReturnData(111, AppConstants.Result.FAILURE);
        }
    }

    
	/**
	 * 获取当前用户已兑换列表信息
	 * @param model
	 * @param request
	 * @param baseRequest
	 * @return
	 * @author:zyy
	 * @time:2017年6月7日
	 */
	@ResponseBody
	@RequestMapping("getConvertedInfo.do")
	public Object getActivityCenterData(Model model, HttpServletRequest request, BaseRequest baseRequest) {
		AccessToken token=ContextUtil.getAccessTokenInfo(baseRequest.getSesskey());
		 List<Map<String,Object>>  actiAwardRecord = actiAwardRecordService.selectByMidKey(token.getMid());
		return this.getReturnData(actiAwardRecord, AppConstants.Result.SUCCESS);
	}
}
