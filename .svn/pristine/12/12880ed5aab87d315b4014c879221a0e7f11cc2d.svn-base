package com.qs.webside.member.service.impl;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import com.qs.common.constant.AppConstants;
import com.qs.common.constant.CommonContants;
import com.qs.common.util.CommonUtils;
import com.qs.common.util.crypto.MD5;
import com.qs.log.game.service.GameRecordService;
import com.qs.webside.game.model.AgentMids;
import com.qs.webside.game.service.GameService;
import com.qs.webside.member.mapper.CommongameMapper;
import com.qs.webside.member.mapper.GameMapper;
import com.qs.webside.member.mapper.MemberfidesMapper;
import com.qs.webside.member.mapper.MemberpaymentMapper;
import com.qs.webside.member.mapper.MembersMapper;
import com.qs.webside.member.model.Commongame;
import com.qs.webside.member.model.Game;
import com.qs.webside.member.model.Memberagents;
import com.qs.webside.member.model.Memberbusiness;
import com.qs.webside.member.model.Memberfides;
import com.qs.webside.member.model.Memberpayment;
import com.qs.webside.member.model.Memberpayment;
import com.qs.webside.member.model.Members;
import com.qs.webside.member.service.MemberService;

import net.rubyeye.xmemcached.MemcachedClient;
import net.rubyeye.xmemcached.exception.MemcachedException;
import weixin.popular.api.SnsAPI;
import weixin.popular.bean.sns.SnsToken;
import weixin.popular.bean.user.User;
import com.qs.webside.member.mapper.MemberagentsMapper;
import com.qs.webside.member.mapper.MemberbusinessMapper;
import com.qs.webside.member.mapper.AgentMidsMapper;


@Service("memberService")
public class MemberServiceImpl implements MemberService {
	
    Logger log = Logger.getLogger(MemberServiceImpl.class);  

	@Autowired
	private MemberfidesMapper memberfidesMapper;
	
	@Autowired
	private MembersMapper membersMapper;
	
	@Autowired
	private CommongameMapper commongameMapper;
	
	@Autowired
	private GameMapper gameMapper;
	
	@Autowired
	private MemcachedClient memcachedClient;
	
	@Autowired
	private MemberagentsMapper memberagentsMapper;
	@Autowired
	private MemberbusinessMapper memberbusinessMapper;
	
	@Autowired
	private GameService gameService;
	@Autowired
	private RedisTemplate redisTemplate;
	@Autowired
	private GameRecordService gameRecordService;
	@Autowired
	private AgentMidsMapper agentMidsMapper;
	
	

    @Value("${wepay.appid}")
    private String appId;

    @Value("${wepay.appSecret}")
    private String secret;
    
	
    @Value("${game.gametype}")
    private byte gameType;
	
	/**
	 * 保存token
	 * id 登录 rgb注册,type游戏
	 * @param mid
	 * @param sid
	 * @param rgp
	 * @return
	 */
	@Override
	public String saveToken(Integer mid,Integer gp,Integer userGp,String ip){
		String key=AppConstants.MemcacheKeyPrefix.SESSKEY+mid;
		String ipKey=AppConstants.MemcacheKeyPrefix.IP+mid;
		String istestuser="0";
		long motime=System.currentTimeMillis();
		String sign=MD5.encrypt(mid+"#"+motime+"#"+AppConstants.SAFECODE);
		String mokey=mid+"-"+motime+"-"+gp+"-"+sign+"-"+userGp+"-"+gameType;
		log.debug("mokey==========::"+mokey);
		try {
			memcachedClient.set(key,6*3600, mokey);
			memcachedClient.set(ipKey,6*3600, ip);
		} catch (TimeoutException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (MemcachedException e) {
			e.printStackTrace();
		}
		return mokey;
	}
   
	@Override
	public Memberfides insertMemberfides(Memberfides record,String openId) {
		Members  member=new Members();
		member.setSitemid(openId);
		int result=membersMapper.insert(member);
		int mid=member.getMid();
		log.debug("member.getmid==========::"+member.getMid());
		
		if(null==record){
			record=new Memberfides();
			record.setName(AppConstants.VISITORNAME);
		}
		record.setMid(mid);
		memberfidesMapper.insertSelective(record);
		
		Long sendGold=CommonUtils.checkLongNull(gameService.getBaseParamValueByCode(AppConstants.BaseParam.REGISTERSEND_GOLD_CODE));
		
		Long gold=sendGold>0?sendGold:5;
		Commongame commongame=new Commongame();
		commongame.setMid(mid);
		commongame.setGold(gold);
		commongame.setVip((byte)0);
		commongame.setBankpasswd("");
		commongame.setBankassets(0l);
		commongameMapper.insertSelective(commongame);
		 //更新金币日志
		 byte action = 0;
		 byte goldLogType=AppConstants.GoldLogSourceType.ADD_USER_SEND;
		 gameRecordService.saveGoldLog(mid,gold, gold,goldLogType,action);
		
		//从配置文件取数据
		Game game=new Game();
		game.setMid(mid);
		game.setJifen(0l);
		game.setType((int)gameType);
		gameMapper.insertSelective(game);
		
		return record;
	}

	@Override
	public Memberfides findMemberfidesById(Integer id) {
		return memberfidesMapper.selectByPrimaryKey(id);
	}

	@Override
	public int updateMemberfides(Memberfides record) {
		return memberfidesMapper.updateByPrimaryKeySelective(record);
	}
	@Override
	public Members findMembersBySitemid(String sitemid) {
		
		String cacheKey = AppConstants.RedisKeyPrefix.USER_WEIXIN_CACHE + sitemid;
		Members entity = (Members) redisTemplate.opsForValue().get(cacheKey);
		log.debug("Members entity======::"+entity);
		if (null != entity) {
			return entity;
		} else {
			Members record= membersMapper.findMembersBySitemid(sitemid);
			log.debug("Members record======::"+record);
			String userWeixinCacheKey=AppConstants.RedisKeyPrefix.USER_WEIXIN_CACHE+sitemid;
			redisTemplate.opsForValue().set(userWeixinCacheKey, record,AppConstants.RedisExpire.USER_WEIXIN_EXPIRE_DATE,TimeUnit.DAYS);
			return record;
		}
	}

	

	@Override
	public Game findGameById(Integer id) {

		String cacheKey = AppConstants.RedisKeyPrefix.MEMBER_GAME_CACHE + id;
		Game entity = (Game) redisTemplate.opsForValue().get(cacheKey);
		log.debug("Game======::"+entity);
		if (null != entity) {
			return entity;
		} else {
			Game record= gameMapper.selectByPrimaryKey(id);
			log.debug("Game=record=====::"+record);
			String memberGameCacheKey=AppConstants.RedisKeyPrefix.MEMBER_GAME_CACHE+id;
			redisTemplate.opsForValue().set(memberGameCacheKey, record,AppConstants.RedisExpire.EXPIRE_DATE,TimeUnit.DAYS);
			return record;
		}
	}


	@Override
	public Commongame findCommongameById(Integer id) {
		return commongameMapper.selectByPrimaryKey(id);
	}

	@Override
	public Map<String, Object> getInfoByCode(String code,int gp) {
		User user=null;
		Map<String, Object> map = new HashMap<String, Object>();
		String wxAppId=appId;
		String wxSecret=secret;
		if(gp>102){
			wxAppId=gameService.getBaseParamValueByCode(AppConstants.BaseParamConfig.weixin_appId+gp);
			wxSecret=gameService.getBaseParamValueByCode(AppConstants.BaseParamConfig.weixin_appSecret+gp);
		}
		
		String tokenCode=AppConstants.RedisKeyPrefix.REFRESH_TOKEN+code;
		String refreshToken=(String)redisTemplate.opsForValue().get(AppConstants.RedisKeyPrefix.REFRESH_TOKEN+code);
		if(null!=refreshToken){
			 SnsToken snsToken=SnsAPI.oauth2RefreshToken(wxAppId, refreshToken);
			 log.debug("oauth2RefreshToken===:"+snsToken.toString());
			 if(!StringUtils.isBlank(snsToken.getErrcode())){
				 map.put(CommonContants.RESULT,Boolean.FALSE);
				 map.put("errcode",snsToken.getErrcode());
				 map.put("errmsg", snsToken.getErrmsg());
				 return map;
			 }
			 user=SnsAPI.userinfo(snsToken.getAccess_token(), snsToken.getOpenid(),"zh_CN");
			 log.debug("oauth2RefreshToken-userinfo==:="+user.toString());
			 if(!StringUtils.isBlank(user.getErrcode())){
				 map.put(CommonContants.RESULT,Boolean.FALSE);
				 map.put("errcode",user.getErrcode());
				 map.put("errmsg", user.getErrmsg());
				 return map;
			 }
			
			 redisTemplate.opsForValue().set(tokenCode,snsToken.getRefresh_token(),15*24*3600,TimeUnit.SECONDS);
			
		}else{
			 SnsToken snsToken=SnsAPI.oauth2AccessToken(wxAppId,wxSecret,code);
			 log.debug("SnsAPI.oauth2AccessToken===:"+snsToken.toString());
			 if(!StringUtils.isBlank(snsToken.getErrcode())){
				 map.put(CommonContants.RESULT,Boolean.FALSE);
				 map.put("errcode",snsToken.getErrcode());
				 map.put("errmsg", snsToken.getErrmsg());
				 return map;
			 }
			 user=SnsAPI.userinfo(snsToken.getAccess_token(), snsToken.getOpenid(),"zh_CN");
			 log.debug("oauth2AccessToken-SnsAPI.userinfo===:"+user.toString());
			 if(!StringUtils.isBlank(user.getErrcode())){
				 map.put(CommonContants.RESULT,Boolean.FALSE);
				 map.put("errcode",user.getErrcode());
				 map.put("errmsg", user.getErrmsg());
				 return map;
			 }
			redisTemplate.opsForValue().set(tokenCode,snsToken.getRefresh_token(),29*24*3600,TimeUnit.SECONDS);
		};
		
		map.put(CommonContants.RESULT,Boolean.TRUE);
		map.put("user",user);
		
		return map;
	}

	@Override
	public int updateCommongame(Commongame record) {
		return commongameMapper.updateByPrimaryKeySelective(record);
	}

	@Override
	public Memberagents findMemberagentsByMid(Integer mid) {
		return memberagentsMapper.findMemberagentsByMid(mid);
	}
	
	
	@Override
	public Memberbusiness findMemberbusinessByMid(Integer mid) {
		return  memberbusinessMapper.findMemberbusinessByMid(mid);
	}

	@Override
	public AgentMids getAgentGrantByMid(Integer mid){
		return agentMidsMapper.getAgentGrantByMid(mid);
	}



}
