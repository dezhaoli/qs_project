package com.qs.log.game.service.impl;

import com.qs.common.util.DateUtil;
import com.qs.common.util.SocketPacket;
import com.qs.log.game.mapper.MailsMapper;
import com.qs.log.game.model.Mails;
import com.qs.log.game.service.IMailService;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 * Created by zun.wei on 2017/3/2.
 * To change this template use File|Default Setting
 * |Editor|File and Code Templates|Includes|File Header
 */
@Service
public class MailServiceImpl implements IMailService {

    @Resource
    private MailsMapper mailsMapper;

    @Override
    public int deleteById(Integer id) {
        return mailsMapper.deleteByPrimaryKey(id);
    }

    @Override
    public int add(Mails record) {
        return mailsMapper.insert(record);
    }

    @Override
    public int addSelective(Mails record) {
        return mailsMapper.insert(record);
    }

    @Override
    public Mails loadById(Integer id) {
        return mailsMapper.selectByPrimaryKey(id);
    }

    @Override
    public int updateByIdSelective(Mails record) {
        return mailsMapper.updateByPrimaryKeySelective(record);
    }

    @Override
    public int updateByIdWithBLOBs(Mails record) {
        return mailsMapper.updateByPrimaryKeyWithBLOBs(record);
    }

    @Override
    public int updateByPrimaryKey(Mails record) {
        return mailsMapper.updateByPrimaryKey(record);
    }

    @Override
    public List<Mails> queryListByPage(Map<String, Object> parameters) {
        return mailsMapper.queryListByPage(parameters);
    }

    @Override
    public boolean sendMail(Integer mapType, Integer mapMsg, Integer cmdType,
                            Integer mid,String hostAddress,int hostPort) {
        try {
            Socket socket = new Socket(hostAddress, hostPort);
            String content = SocketPacket.getSendMailContent(mapType, mapMsg, cmdType, mid);
            OutputStream os = socket.getOutputStream();//字节输出流
            PrintWriter pw = new PrintWriter(os);//将输出流包装成打印流
            pw.write(content);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }


}
