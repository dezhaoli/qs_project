package com.qs.webside.member.service.impl;

import com.alibaba.fastjson.JSON;
import com.qs.common.constant.AppConstants;
import com.qs.common.constant.CommonContants;
import com.qs.common.util.SocketUtils;
import com.qs.webside.member.model.Memberfides;
import com.qs.webside.member.model.Members;
import com.qs.webside.member.service.IShareLinkService;
import com.qs.webside.member.service.MemberService;
import net.rubyeye.xmemcached.MemcachedClient;
import net.rubyeye.xmemcached.exception.MemcachedException;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;
import sun.misc.BASE64Decoder;

import javax.annotation.Resource;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

/**
 * Created by zun.wei on 2017/7/21 11:16.
 * Description:
 */
@Service
public class ShareLinkServiceImpl implements IShareLinkService {

    Logger log = Logger.getLogger(ShareLinkServiceImpl.class);

    @Resource
    private MemberService memberService;

    @Resource
    private MemcachedClient memcachedClient;

    @Resource
    private RedisTemplate redisTemplate;

    @Override
    public String setRoomInfo(Map<String, Object> roomInfoMap, Model model, int roomid, int gameType)
            throws InterruptedException, MemcachedException, TimeoutException, IOException {
        decodeRoomInfo(roomInfoMap, model,roomid);
        switch (gameType) {
            case 6:
                return setGDMajiangRoomInfo(model,roomid);
            case 20:
                return setJXMajiangRoomInfo(model, roomid);
        }
        return null;
    }

    /**
     * @Author:zun.wei , @Date:2017/7/26 20:29
     * @Description:解密玩法
     * @param roomInfoMap 房间信息
     * @param model
     * @param roomid
     * @throws IOException
     */
    public void decodeRoomInfo(Map<String, Object> roomInfoMap, Model model, int roomid) throws IOException {
        Map<String, Object> infoMap = null;
        if (roomInfoMap != null) {
            infoMap = roomInfoMap;
            redisTemplate.opsForValue().set(AppConstants.RedisKeyPrefix.SHARE_LINK_JOIN_ROOM_INFO_CACHE + roomid, roomInfoMap, 30, TimeUnit.MINUTES);
        } else {
            Object o = redisTemplate.opsForValue().get(AppConstants.RedisKeyPrefix.SHARE_LINK_JOIN_ROOM_INFO_CACHE + roomid);
            infoMap = o != null ? (Map<String, Object>) o : null;
        }
        BASE64Decoder decoder = new BASE64Decoder();
        byte[] b = decoder.decodeBuffer(infoMap.get("wanfaEncode") + "");
        String wanfadeCode = new String(b, "utf-8");
        log.debug("wanfa encode is ----:: " + infoMap.get("wanfaEncode") + " wanfa decode is ----:: " + wanfadeCode);
        model.addAttribute("wfList", wanfadeCode);//玩法
        model.addAttribute("roomtitle", new String(decoder.decodeBuffer(infoMap.get("roomtitle") + ""), "utf-8"));//房间标题
        model.addAttribute("jushu", infoMap.get("jushu"));//玩牌局数
    }

    //广东麻将
    private String setGDMajiangRoomInfo(Model model, int roomid)
            throws InterruptedException, MemcachedException, TimeoutException {
        String roomInfo = memcachedClient.get("MAJIANGROOM|" + roomid + "");
        if (StringUtils.isNotBlank(roomInfo)) {
            Map<String, Object> infoMap = JSON.parseObject(roomInfo, Map.class);
            List<Map<String, Object>> seatsList = (List<Map<String, Object>>) infoMap.get("seats");
            if (seatsList != null) {
                List<Map<String, Object>> seats = new ArrayList<>();
                for (Map<String, Object> seat : seatsList) {
                    int seatMid = (int) seat.get("mid");
                    int seatno = (int) seat.get("seatno");
                    Memberfides memberfides = memberService.findMemberfidesById(seatMid);
                    if (memberfides != null) {
                        Map<String, Object> map = new HashMap<>();
                        map.put("mid", memberfides.getMid());
                        map.put("name", memberfides.getName());
                        map.put("icon", memberfides.getIcon());
                        map.put("seatno", seatno);//座位号
                        seats.add(map);
                    }
                }
                String seatsJson = JSON.toJSONString(seats);
                model.addAttribute("seats", seatsJson);//玩家信息
                log.debug("setGDMajiangRoomInfo room info seats:" + seatsJson );
                return seatsJson;
            }
        } else {
            model.addAttribute("seats", null);//玩家信息
            log.debug("setGDMajiangRoomInfo play room is not exist --------::" );
        }
        return null;
    }

    //江西麻将
    private String setJXMajiangRoomInfo(Model model, int roomid) {

        return null;
    }

    @Override
    public Map<String, Object> getUserInfoByCookieCode(String unionid, int gameType){
        Map<String, Object> map = new HashMap<>();
        Members members = memberService.findMembersBySitemid(unionid);
        if (StringUtils.isBlank(unionid)) {//测试用
            members = new Members();
            members.setMid(54118);
        }
        if (members != null) {
            Memberfides memberfides = memberService.findMemberfidesById(members.getMid());
            if (memberfides != null) {
                map.put(CommonContants.SUCCESS, Boolean.TRUE);
                map.put("nowUserIcon", memberfides.getIcon());
                map.put("nowUserName", memberfides.getName());
                map.put("nowUserMid", memberfides.getMid());
            } else {
                map.put(CommonContants.SUCCESS, Boolean.FALSE);
            }
        } else {
            map.put(CommonContants.SUCCESS, Boolean.FALSE);
        }
        return map;
    }

    @Override
    public Map<String, Object> joinRoom(int roomid, String unionid, Model model, int gp, String sesskey, String cIp, int cPort, int gameType)
            throws IOException, InterruptedException, MemcachedException, TimeoutException {
        Members members = memberService.findMembersBySitemid(unionid);
        if (StringUtils.isBlank(unionid)) {//测试用
            members = new Members();
            members.setMid(54118);
        }
        Map<String, Object> map = new HashMap<>();
        if (members != null) {
            Memberfides memberfides = memberService.findMemberfidesById(members.getMid());
            if (memberfides != null) {//用户存在
                requestToCServer(roomid, gp, sesskey, cIp, cPort, memberfides, map, gameType);
            } else {//用户不存在，查不到数据
                log.debug("no checkout on db ;please confirm memberfides0 table ----------::");
                map.put(CommonContants.SUCCESS, Boolean.FALSE);
                map.put(CommonContants.ERROR, -2);//用户不存在
                map.put(CommonContants.MESSAGE, "用户不存在");
            }
            map.put("nowUserMid", members.getMid());
            String roomInfo = setRoomInfo(null, model, roomid, gameType);
            map.put("roomInfo", roomInfo);
        } else {//用户不存在，未注册过
            map.put(CommonContants.SUCCESS, Boolean.FALSE);
            map.put(CommonContants.ERROR, -1);//用户未注册
            map.put(CommonContants.MESSAGE, "用户未注册");
        }
        model.addAttribute("roomid", roomid);
        model.addAttribute("joinRoomResult", JSON.toJSONString(map));
        log.debug("join room result --------:: roomid is " + roomid + " joinRoomResult :" + map);
        return map;
    }

    /**
     * @Author:zun.wei , @Date:2017/7/24 15:03
     * @Description:向C++服务器提交请求
     * @param roomid 房间号
     * @param gp gp
     * @param sesskey
     * @param cIp socket ip
     * @param cPort socket port
     * @param memberfides 人员
     * @param map 返回值map
     * @param gameType 游戏类型
     * @throws IOException
     */
    private void requestToCServer(int roomid, int gp, String sesskey, String cIp, int cPort, Memberfides memberfides
            , Map<String, Object> map, int gameType) throws IOException {
        int mid = memberfides.getMid();
        SocketUtils socketUtils = switchSocketUtilByGameType(gameType, gp, sesskey, cIp, cPort, mid);
        boolean login = socketUtils.writeToServer();//登录c++ 服务器
        log.debug("user mid is " + mid + " join room " + roomid + ";" + "socket connect and write to c++ server result ----------::" + login);
        if (login && socketUtils.receviveInteger() == 0) {//服务器返回0表示登录成功
            boolean joinRoom = switchJoinRoomTypeByGameType(gameType, roomid, mid, socketUtils);
            if (joinRoom) {//发送请求到c++服务器成功
                executeJoinRoom(roomid, mid, socketUtils,map);
            } else {
                map.put(CommonContants.SUCCESS, Boolean.FALSE);
                map.put(CommonContants.ERROR, -3);//发送加入房间请求失败
                map.put(CommonContants.MESSAGE, "加入房间请求失败");
                log.debug("user mid is " + mid + " join room " + roomid + ";send join room request fail.");
            }
        } else {
            map.put(CommonContants.SUCCESS, Boolean.FALSE);
            map.put(CommonContants.ERROR, -4);//发送登录请求失败
            map.put(CommonContants.MESSAGE, "登录请求失败");
            log.debug("share link login fail ---------:: please confirm parameters !");
        }
        socketUtils.close();
    }


    /**
     * @Author:zun.wei , @Date:2017/7/24 15:04
     * @Description:执行加入房间请求操作
     * @param roomid 房间号
     * @param mid 请求加入房间的人
     * @param socketUtils SocketUtils工具类对象
     * @param map 返回值map
     * @throws IOException
     */
    private void executeJoinRoom(int roomid, int mid, SocketUtils socketUtils, Map<String, Object> map) throws IOException {
        long t1 = System.currentTimeMillis();
        while (true) {
            long t2 = System.currentTimeMillis();
            if (t2 - t1 > 5000) {//五秒钟循环如果未加入成功则跳出循环
                map.put(CommonContants.SUCCESS, Boolean.FALSE);
                map.put(CommonContants.ERROR, -5);//c++服务器返回加入房间超时
                map.put(CommonContants.MESSAGE, "加入房间超时");
                log.debug("user mid is " + mid + " join room " + roomid + ";"
                        + "join room is timeout,the time equal -------::" + 5000);
                break;
            } else {
                String joinResult = socketUtils.recviceJoinRoomResult();
                if (StringUtils.isNotBlank(joinResult)) {
                    int recvInt = Integer.parseInt(joinResult.split("_")[1]);
                    int cmd = Integer.parseInt(joinResult.split("_")[2]);
                    String errorMsg = handleRecvData(cmd, recvInt);
                    if (StringUtils.isBlank(errorMsg) && recvInt > 0) {
                        map.put(CommonContants.SUCCESS, Boolean.TRUE);
                        map.put(CommonContants.ERROR, 1);//成功加入房间
                        map.put(CommonContants.MESSAGE, "成功加入房间");
                        log.debug("user mid is " + mid + " join room " + roomid + " successful !");
                        break;//加入房间成功跳出循环
                    } else {
                        map.put(CommonContants.SUCCESS, Boolean.FALSE);
                        map.put(CommonContants.ERROR, -6);//服务器返回错误码
                        map.put(CommonContants.MESSAGE,errorMsg);
                        log.debug("user mid is " + mid + " join room " + roomid + " error msg --::" + errorMsg);
                        break;
                    }
                }
            }
        }
    }

    /**
     * @Author:zun.wei , @Date:2017/7/26 15:00
     * @Description:操作返回值
     * @param cmd 返回的命令
     * @param recvInt 接收到的代码
     * @return
     */
    private String handleRecvData(int cmd, int recvInt) {
        switch (cmd) {
            case 1103:
                return handleErrorCodeByCmd1103(recvInt);
            case 1001:
                return handleErrorCodeByCmd1001(recvInt);
            default:
                return handleErrorCodeByCmd1001(recvInt);
        }
    }

    /**
     * @Author:zun.wei , @Date:2017/7/26 15:00
     * @Description:操作命令为1103的错误代码
     * @param recvInt 接收到的代码
     * @return
     */
    private String handleErrorCodeByCmd1103(int recvInt) {
        switch (recvInt) {
            case -1102:
                return "房间未找到";
            case -1106:
                return "没有加入俱乐部";
            case -1109:
                return "ip地址重复";
                default:
                    return "未知错误";
        }
    }

    /**
     * @Author:zun.wei , @Date:2017/7/26 15:01
     * @Description:操作命令为1001的错误代码
     * @param recvInt 接收到的代码
     * @return
     */
    private String handleErrorCodeByCmd1001(int recvInt) {
        switch (recvInt) {
            case -1:
                return "房间人数已满";
            case -2:
                return "房间人数已满";
            default:
                return null;
        }
    }


    /**
     * @Author:zun.wei , @Date:2017/7/24 15:05
     * @Description:根据游戏类型切换不同的SocketUtils 构造方法
     * @param gameType 游戏类型
     * @param gp gp
     * @param sesskey session key
     * @param cIp socket ip
     * @param cPort socket port
     * @param mid 请求加入房间的mid
     * @return
     */
    private SocketUtils switchSocketUtilByGameType(int gameType, int gp, String sesskey, String cIp, int cPort, int mid) {
        switch (gameType) {
            case 6:
                return createMajiangSocketUtils(gp, sesskey, cIp, cPort, mid);
            default:
                return createMajiangSocketUtils(gp, sesskey, cIp, cPort, mid);
        }
    }

    /**
     * @Author:zun.wei , @Date:2017/7/24 15:07
     * @Description:根据游戏类型切换构造不同的加入房间命令
     * @param gameType 游戏类型
     * @param roomid 房间号
     * @param mid 请求加入房间的mid
     * @param socketUtils SocketUtils
     * @return
     */
    private boolean switchJoinRoomTypeByGameType(int gameType, int roomid, int mid, SocketUtils socketUtils) {
        switch (gameType) {
            case 6:
                return joinMajiangRoom(roomid, mid, socketUtils);
            default:
                return joinMajiangRoom(roomid, mid, socketUtils);
        }
    }

    /**
     * @Author:zun.wei , @Date:2017/7/24 15:08
     * @Description:加入广东麻将房间命令请求
     * @param roomid 房间号
     * @param mid 请求加入房间的mid
     * @param socketUtils SocketUtils
     * @return
     */
    private boolean joinMajiangRoom(int roomid, int mid, SocketUtils socketUtils) {
        log.debug("user mid is " + mid + " join room " + roomid + ";" + "socket connect c++ server successful; ");
        boolean joinRoom = socketUtils.setCmd(1103).setIntParam(roomid).build().writeToServer();
        log.debug("user mid is " + mid + " join room " + roomid + ";" + "send join room request to c++ server,the server response result is -----------::" + joinRoom);
        return joinRoom;
    }

    /**
     * @Author:zun.wei , @Date:2017/7/24 15:09
     * @Description:构造广东麻将SocketUtils的登录命令和端口
     * @param gp gp
     * @param sesskey session key
     * @param cIp socket ip
     * @param cPort socket port
     * @param mid 请求加入房间的mid
     * @return
     */
    private SocketUtils createMajiangSocketUtils(int gp, String sesskey, String cIp, int cPort, int mid) {
        return new SocketUtils().createSocket(cIp, cPort).setCmd(1000).fromUserMid(mid).setStrParam(sesskey).setIntParam(gp).setIntParam(2400).build();
    }


}
