package com.qs.common.util;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.URL;
import java.net.URLConnection;
import java.util.List;
import java.util.Map;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.util.EntityUtils;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

//import net.sf.json.JSONObject;

public class HttpClientUtil {
  
	private static final Log log = LogFactory.getLog(HttpClientUtil.class);
	
	/** 
	 * 向指定 URL 发送POST方法的请求 
	 *  
	 * @param url 
	 *            发送请求的 URL 
	 * @param param 
	 * @return 所代表远程资源的响应结果 
	 */  
	public static String sendPost(String url, String param) {  
	    StringBuilder sb = new StringBuilder();  
	    PrintWriter out = null;  
	    BufferedReader in = null;  
	    try {  
	        URL realUrl = new URL(url);  
	        // 打开和URL之间的连接  
	        URLConnection conn = realUrl.openConnection();  
	        // 设置通用的请求属性  
	        conn.setRequestProperty("accept", "*/*");  
	        conn.setRequestProperty("connection", "Keep-Alive");  
	        conn.setRequestProperty("user-agent",  
	                "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");  
	        // 发送POST请求必须设置如下两行  
	        conn.setDoOutput(true);  
	        conn.setDoInput(true);  
	        // 获取URLConnection对象对应的输出流  
	        out = new PrintWriter(conn.getOutputStream());  
	        // 发送请求参数  
	        out.print(param);  
	        // flush输出流的缓冲  
	        out.flush();  
	        // 定义BufferedReader输入流来读取URL的响应  
	        in = new BufferedReader(  
	                new InputStreamReader(conn.getInputStream()));  
	        String line;  
	        sb = new StringBuilder();  
	        while ((line = in.readLine()) != null) {  
	            sb.append(line);  
	        }  
	    } catch (Exception e) {  
	        System.out.println("发送 POST 请求出现异常！"+e);  
	        e.printStackTrace();  
	    }  
	    //使用finally块来关闭输出流、输入流  
	    finally{  
	        try{  
	            if(out!=null){  
	                out.close();  
	            }  
	            if(in!=null){  
	                in.close();  
	            }  
	        }  
	        catch(IOException ex){  
	            ex.printStackTrace();  
	        }  
	    }  
	    return sb.toString();  
	}   
	
	
	/**
	 * 普通参数进行请求
	 * @param urlStr
	 * @param nvps
	 * @return
	 */
    public  static String httpClientByPost(String url,List<NameValuePair> nvps) {  
        HttpClient httpClient = new DefaultHttpClient(new ThreadSafeClientConnManager());  
        HttpPost httpPost = new HttpPost(url);  
        httpPost.addHeader("Connection", "Keep-Alive");
        String resData=null;
        try {
        	  StringEntity entity=new UrlEncodedFormEntity(nvps,"utf-8");
        	  entity.setContentEncoding("utf-8");     
			  httpPost.setEntity(entity);
			  HttpResponse result = httpClient.execute(httpPost);  
		      resData = EntityUtils.toString(result.getEntity(),"UTF-8");
		      //log.info("resData===::"+resData);
		      return resData;
		} catch (Exception e) {
			e.printStackTrace();
			log.error("url===::" + url);
			log.error("resData===::" + e.getMessage());
			return "httpClient.exception";
		}  
       
    }
    
    /**
     * map转化json进行http请求
     * @param url
     * @param paraMap
     * @throws Exception
     */
    public static String httpClientByPost(String url,Object obj){ 
	    JSONObject json = new JSONObject();  
	    HttpClient httpClient = new DefaultHttpClient(new ThreadSafeClientConnManager());  
        HttpPost method = new HttpPost(url); 
        method.addHeader("Connection", "Keep-Alive");
        String resData=null;
        try {
			//json.accumulateAll(paraMap);
			String jsonStr=JSON.toJSONString(obj);
			StringEntity entity = new StringEntity(jsonStr, "utf-8");
			//StringEntity entity = new StringEntity(json.toString(), "utf-8");
			entity.setContentEncoding("UTF-8");
			entity.setContentType("application/json");
			method.setEntity(entity);
			HttpResponse result = httpClient.execute(method);
			resData = EntityUtils.toString(result.getEntity());
			//log.info("resData===::" + resData);
			return resData;
        } catch (Exception e) {
			e.printStackTrace();
			log.error("url===::" + url);
			log.error("resData===::" + e.getMessage());
			return "httpClient.exception";
		}
 }
	
}
