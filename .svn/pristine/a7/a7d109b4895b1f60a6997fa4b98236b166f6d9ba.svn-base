package com.qs.webside.api.controller;

import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.qs.common.base.basecontroller.BaseController;
import com.qs.common.constant.AppConstants;
import com.qs.common.ip2region.DbSearcher;
import com.qs.common.util.CommonUtils;
import com.qs.log.game.model.RoomRecord;
import com.qs.log.game.service.GameRecordService;
import com.qs.webside.api.model.MemberInviteRequest;
import com.qs.webside.api.model.RoomRecordRequest;
import com.qs.webside.game.model.Memberinvite;
import com.qs.webside.game.service.GameService;
import com.qs.webside.member.model.Memberfides;
import com.qs.webside.member.service.MemberService;
import com.qs.webside.member.service.NoticeService;
import com.qs.webside.util.AccessToken;
import com.qs.webside.util.ContextUtil;

@Controller
@Scope("prototype")
@RequestMapping("/api/notice/")
public class NoticeController extends BaseController {
	
	@Autowired
	private MemberService memberService;
	@Autowired
	private GameService gameService;
	@Autowired
	private NoticeService noticeService;

	/***
	 * 绑定领奖(绑定邀请码)
	 * @param roomRecordRequest
	 * @return
	 */
	@RequestMapping("awardInviteCode.do")
	@ResponseBody
	public Object awardInviteCode(MemberInviteRequest inviteRequest){
		Map<String, Object> map = new HashMap<String, Object>();
		 AccessToken token=ContextUtil.getAccessTokenInfo(inviteRequest.getSesskey());
		Memberinvite  memberinvite= gameService.findByInviteCode(inviteRequest.getCode());
		if(null==memberinvite){
			 return this.getReturnData(map,AppConstants.Result.FAILURE_1102);
		}
		Memberfides mUser=memberService.findMemberfidesById(token.getMid());
		int result=noticeService.saveInviteBind(token.getMid(), memberinvite.getMid());
		if(AppConstants.Result.SUCCESS!=result){
			 return this.getReturnData(map,result);
		}
		
		int bindSendGold=CommonUtils.checkIntegerNull(gameService.getBaseParamValueByCode(AppConstants.BaseParam.BINDSEND_GOLD_CODE));
		if(CommonUtils.checkIntegerNull(mUser.getBindtime())>0){
			bindSendGold=0;
		}
		noticeService.updateGold(token.getMid(),bindSendGold,AppConstants.GoldLogSourceType.BIND_AWARD);
		
		 return this.getReturnData(map,AppConstants.Result.SUCCESS);
	}

	
	

}
