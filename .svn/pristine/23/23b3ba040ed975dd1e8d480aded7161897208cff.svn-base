package com.qs.webside.query.controller;

import com.alibaba.fastjson.JSON;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.qs.common.base.basecontroller.BaseController;
import com.qs.common.dtgrid.model.Pager;
import com.qs.common.util.PageUtil;
import com.qs.log.game.model.RoomRecord;
import com.qs.log.game.service.IPlayerRecordService;
import com.qs.log.game.service.IRoomRecordService;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.Map;

/**
 * //@Author:zun.wei, @Date:2017/4/17 11:16
 * 牌局查询
 * Created by zun.wei on 2017/4/17.
 * To change this template use File|Default Setting
 * |Editor|File and Code Templates|Includes|File Header
 */
@Controller
@RequestMapping(value = "/query/")
public class CardRecordController extends BaseController {

    //   /query/cardRecordUi.html

    @Resource
    private IPlayerRecordService playerRecordService;

    @Resource
    private IRoomRecordService roomRecordService;

    @RequestMapping(value = "cardRecordUi.html", method = RequestMethod.GET)
    public String cardRecordUi(Model model, HttpServletRequest request) {
        PageUtil page = super.getPage(request);
        model.addAttribute("page", page);
        return "WEB-INF/view/web/query/cardRecord_query_list";
    }

    /**
     * //@Author:zun.wei, @Date:2017/4/17 19:14
     * 订单明细
     * @param gridPager
     * @return
     * @throws Exception
     */
    @RequestMapping("cardRecord.html")
    @ResponseBody
    public Object cardRecord(String gridPager) throws Exception {
        Map<String, Object> parameters = null;
        // 映射Pager对象
        Pager pager = JSON.parseObject(gridPager, Pager.class);
        // 判断是否包含自定义参数
        parameters = pager.getParameters();
        if (parameters.size() < 0) {
            parameters.put("name", null);
        }
        // 设置分页，page里面包含了分页信息
        Page<Object> page = PageHelper.startPage(pager.getNowPage(), pager.getPageSize());
        List<Map<String,Object>> list = playerRecordService.queryCardRecordByPage(parameters);
        return getReturnPage(pager, page, list);
    }

    /**
     * @Author:zun.wei , @Date:2017/5/22 16:17
     * @Description:根据房间编号查询房间详情
     * @param model
     * @param request
     * @return
     */
    @RequestMapping(value = "roomDetailUi.html", method = RequestMethod.GET)
    public String roomDetailUi(Model model, HttpServletRequest request) {
        String uuid = request.getParameter("uuid");
        RoomRecord roomRecord = roomRecordService.queryByUuid(uuid);
        if (roomRecord != null) {
            String info = roomRecord.getInfo();
            model.addAttribute("info", info);
        }
        return "WEB-INF/view/web/query/roomDetail_query_list";
    }



    /**
     * @Author:zun.wei , @Date:2017/5/22 16:27
     * @Description:格式化json
     * @param jsonStr
     * @return
     */
    private static String formatJson(String jsonStr) {
        if (null == jsonStr || "".equals(jsonStr))
            return "";
        StringBuilder sb = new StringBuilder();
        char last = '\0';
        char current = '\0';
        int indent = 0;
        boolean isInQuotationMarks = false;
        for (int i = 0; i < jsonStr.length(); i++) {
            last = current;
            current = jsonStr.charAt(i);
            switch (current) {
                case '"':
                    if (last != '\\'){
                        isInQuotationMarks = !isInQuotationMarks;
                    }
                    sb.append(current);
                    break;
                case '{':
                case '[':
                    sb.append(current);
                    if (!isInQuotationMarks) {
                        sb.append('\n');
                        indent++;
                        addIndentBlank(sb, indent);
                    }
                    break;
                case '}':
                case ']':
                    if (!isInQuotationMarks) {
                        sb.append('\n');
                        indent--;
                        addIndentBlank(sb, indent);
                    }
                    sb.append(current);
                    break;
                case ',':
                    sb.append(current);
                    if (last != '\\' && !isInQuotationMarks) {
                        sb.append('\n');
                        addIndentBlank(sb, indent);
                    }
                    break;
                default:
                    sb.append(current);
            }
        }

        return sb.toString();
    }

    /**
     * @Author:zun.wei , @Date:2017/5/22 16:27
     * @Description:添加space
     * @param sb
     * @param indent
     */
    private static void addIndentBlank(StringBuilder sb, int indent) {
        for (int i = 0; i < indent; i++) {
            sb.append('\t');
        }
    }

}
