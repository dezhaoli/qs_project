package com.qs.webside.activity.service.impl;

import com.qs.common.constant.CacheConstan;
import com.qs.common.constant.Constants;
import com.qs.webside.activity.mapper.ActiCenterMapper;
import com.qs.webside.activity.model.ActiAward;
import com.qs.webside.activity.model.ActiCenter;
import com.qs.webside.activity.service.IActiCenterService;

import net.rubyeye.xmemcached.MemcachedClient;
import net.rubyeye.xmemcached.exception.MemcachedException;

import org.apache.log4j.Logger;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeoutException;

/**
 * Created by zun.wei on 2017/5/31 15:54.
 * Description:活动中心表
 */
@Service
public class ActiCenterServiceImpl implements IActiCenterService {
	
	Logger log = Logger.getLogger(ActiCenterServiceImpl.class);  
    @Resource
    private ActiCenterMapper actiCenterMapper;
    
    @Resource
    private MemcachedClient memcachedClient;

    @Override
    public int deleteByPrimaryKey(Integer id) {
        return actiCenterMapper.deleteByPrimaryKey(id);
    }

    @Override
    public int insert(ActiCenter record) {
        return actiCenterMapper.insert(record);
    }

    @Override
    public int insertSelective(ActiCenter record) {
        return actiCenterMapper.insertSelective(record);
    }

    @Override
    public ActiCenter selectByPrimaryKey(Integer id) {
        return actiCenterMapper.selectByPrimaryKey(id);
    }

    @Override
    public int updateByPrimaryKeySelective(ActiCenter record) {
        return actiCenterMapper.updateByPrimaryKeySelective(record);
    }

    @Override
    public int updateByPrimaryKey(ActiCenter record) {
        return actiCenterMapper.updateByPrimaryKey(record);
    }

    @Override
    public List<ActiCenter> queryListByPage(Map<String, Object> parameter) {
        return actiCenterMapper.queryListByPage(parameter);
    }

    @Override
    @Cacheable(value = {CacheConstan.ACTIVITY_CENTER_CACHE_NAME}, key = "#root.methodName")
    public List<Map<String,Object>> queryListActivityByStatus() {
        return actiCenterMapper.queryListActivityByStatus();
    }

    @Override
    @Cacheable(value = {CacheConstan.ACTIVITY_CENTER_TYPE_CACHE_NAME},key = "#root.methodName + ':'+#root.args[0]")
    public Map<String, Object> queryListActivityByStatusAndType(Integer type) {
        return actiCenterMapper.queryListActivityByStatusAndType(type);
    }

    
    /**
     * 所用活动信息封装对象获取
     */
	@Override
	public Map<String, Object> getActivityCenterInfos(int mid) {
		Map<String,Object> result=new HashMap<>();	
		ActiCenter actiCenter= this.getActivityInfo( Constants.ActiveCenter.Eleven_activities);
		if (actiCenter !=null ){
			result.put("type", actiCenter.getType());
			result.put("createTime", actiCenter.getCreateTime());
			result.put("endTime", actiCenter.getEndTime());
			Object object = null;
			try {
				object = memcachedClient.get("abc");
			} catch (TimeoutException e) {
				log.debug("into getActivityCenterInfos Exception:::",e);
				e.printStackTrace();
			} catch (InterruptedException e) {
				log.debug("into getActivityCenterInfos Exception:::",e);
				e.printStackTrace();
			} catch (MemcachedException e) {
				log.debug("into getActivityCenterInfos Exception:::",e);
				e.printStackTrace();
			}
			if  (object !=null ){
				result.put("playCount",object.toString() );
			}else {
				result.put("playCount",0);
			}
		}
		return result;
	}

	@Override
    //@Cacheable(value = {CacheConstan.ACTI_AWARD_LIST_CACHE_NAME},key="#root.methodName+'AwardList:'+#parameters.get('mid')")
	public ActiCenter getActivityInfo(int type) {
		return actiCenterMapper.getActivityInfo(type);
	}
}
