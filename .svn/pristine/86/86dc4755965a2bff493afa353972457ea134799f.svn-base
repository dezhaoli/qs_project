package com.qs.webside.shiro;

import java.util.List;

import javax.inject.Inject;

import com.qs.common.constant.Constants;
import com.qs.pub.game.model.CommonAgents;
import com.qs.pub.game.model.MemberBusiness;
import com.qs.pub.game.service.IBusinessService;
import com.qs.pub.game.service.ICommonAgentService;
import com.qs.webside.member.mapper.MemberAgentsMapper;
import com.qs.webside.member.model.MemberAgents;
import com.qs.webside.sys.service.agent.service.IMemberAgentService;
import com.qs.webside.sys.service.agent.service.impl.MemberAgentServiceImpl;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authc.LockedAccountException;
import org.apache.shiro.authc.SimpleAuthenticationInfo;
import org.apache.shiro.authc.UnknownAccountException;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;
import org.apache.shiro.subject.SimplePrincipalCollection;
import org.apache.shiro.util.ByteSource;
import org.springframework.beans.factory.annotation.Autowired;

import com.qs.webside.sys.mapper.ResourceMapper;
import com.qs.webside.sys.mapper.UserMapper;
import com.qs.webside.sys.model.ResourceEntity;
import com.qs.webside.sys.model.UserEntity;


/**
 * 
 * @ClassName: MyRealm
 * @Description: 自定义jdbcRealm,认证&授权
 * @author gaogang
 * @date 2016年7月12日 下午4:30:16
 *
 */
public class MyRealm extends AuthorizingRealm {

	@Inject
	private ResourceMapper resourceMapper;

	@Inject
	private UserMapper userMapper;

	@Inject
	private IBusinessService businessService;

	@Autowired
	private MemberAgentServiceImpl memberAgentService;
	
	/**
	 * 授权信息
	 * 只有需要验证权限时才会调用, 授权查询回调函数, 进行鉴权但缓存中无用户的授权信息时调用.在配有缓存的情况下，只加载一次.
	 */
	@Override
	protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
		//UserEntity user = ShiroAuthenticationManager.getUserEntity();
		MemberBusiness memberBusiness = ShiroAuthenticationManager.getBusiness();
		//if (user != null) {
		if (memberBusiness != null) {
			//List<ResourceEntity> resourceList = resourceMapper.findResourcesByUserId(user.getId().intValue());
			List<ResourceEntity> resourceList = resourceMapper.findResourcesByUserId(Constants.Agent.roleId);
			// 权限信息对象info,用来存放查出的用户的所有的角色（role）及权限（permission）
			SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();
			//根据用户ID查询角色（role），放入到Authorization里。
			// 单角色用户情况
			//info.addRole(user.getRole().getName());
			info.addRole(Constants.Business.roleCode);
			// 多角色用户情况
			// info.setRoles(user.getRolesName());
			// 用户的角色对应的所有权限
			for (ResourceEntity resourceEntity : resourceList) {
				info.addStringPermission(resourceEntity.getSourceKey());
			}
			//或者直接查询出所有权限set集合
			//info.setStringPermissions(permissions);
			return info;
		}
		return null;
	}


	/**
	 *  上面的方法 doGetAuthenticationInfo_bak 是原来的，备份。只是把方法名字改了而已。
	 *   此处修改用于商务后台，账号登陆.
	 * @param token
	 * @return
	 * @throws AuthenticationException
	 */
	protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {
		SimpleAuthenticationInfo authenticationInfo = null;
		String username = (String)token.getPrincipal();

		MemberAgents userEntity=memberAgentService.getMemberAgentsInfoBySitemid(username);
		if (userEntity != null) {
			/*if (userEntity.getLocked() == 1) {
				throw new LockedAccountException(); // 帐号被锁定
			}*/
			// 从数据库查询出来的账号名和密码,与用户输入的账号和密码对比
			// 当用户执行登录时,在方法处理上要实现subject.login(token);
			// 然后会自动进入这个类进行认证
			// 交给AuthenticatingRealm使用CredentialsMatcher进行密码匹配，如果觉得shiro自带的不好可以自定义实现
            authenticationInfo = new SimpleAuthenticationInfo(
            		userEntity, // 用户对象
            		"LTh6renp9VWhLe4fojCtuA==", // 密码
					ByteSource.Util.bytes("b0cb414f8880d5aabee65bc5bacb6499"),// salt=username+salt
					getName() // realm name
			);
            /*
             * NOTE Shiro-redis don't support SimpleAuthenticationInfo created by this constructor 
             * org.apache.shiro.authc.SimpleAuthenticationInfo.SimpleAuthenticationInfo(Object principal, Object hashedCredentials, ByteSource credentialsSalt, String realmName). 
             * Please use org.apache.shiro.authc.SimpleAuthenticationInfo.SimpleAuthenticationInfo(Object principal, Object hashedCredentials, String realmName) instead.
             */
            //TODO：因为shiro-redies 不支持带加密盐方式的验证，所以暂时不使用shiro-redies，后续再研究
            //authenticationInfo.setCredentialsSalt(new MySimpleByteSource(username + userEntity.getCredentialsSalt()));
			return authenticationInfo;
		} else {
			throw new UnknownAccountException();// 没找到帐号
		}

	}

	
	/**
     * 清除当前用户权限信息
     */
	public void clearCachedAuthorizationInfo() {
		PrincipalCollection principalCollection = SecurityUtils.getSubject().getPrincipals();
		SimplePrincipalCollection principals = new SimplePrincipalCollection(
				principalCollection, getName());
		super.clearCachedAuthorizationInfo(principals);
	}
	
	/**
     * 清除当前用户认证信息
     */
	public void clearCachedAuthenticationInfo() {
		PrincipalCollection principalCollection = SecurityUtils.getSubject().getPrincipals();
		SimplePrincipalCollection principals = new SimplePrincipalCollection(
				principalCollection, getName());
		super.clearCachedAuthenticationInfo(principals);
	}
	
	/**
	 * 清除指定 principalCollection 的权限信息
	 */
	public void clearCachedAuthorizationInfo(PrincipalCollection principalCollection) {
		SimplePrincipalCollection principals = new SimplePrincipalCollection(
				principalCollection, getName());
		super.clearCachedAuthorizationInfo(principals);
	}
	
	/**
     * 清除用户认证信息
     */
	public void clearCachedAuthenticationInfo(PrincipalCollection principalCollection) {
		SimplePrincipalCollection principals = new SimplePrincipalCollection(
				principalCollection, getName());
		super.clearCachedAuthenticationInfo(principals);
	}


	/**
	 * 清除当前用户的认证和授权缓存信息
	 */
	public void clearAllCache() {
		clearCachedAuthorizationInfo();
		clearCachedAuthenticationInfo();
	}

}