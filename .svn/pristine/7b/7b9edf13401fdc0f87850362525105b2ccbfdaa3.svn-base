package com.qs.webside.api.controller;

import com.qs.common.base.basecontroller.BaseController;
import com.qs.common.constant.AppConstants;
import com.qs.common.util.DateUtil;
import com.qs.webside.member.model.Memberfides;
import com.qs.webside.member.service.MemberService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import net.rubyeye.xmemcached.MemcachedClient;
import weixin.popular.api.SnsAPI;
import weixin.popular.bean.sns.SnsToken;
import weixin.popular.bean.user.User;

import java.util.HashMap;
import java.util.Map;

@Controller
@Scope("prototype")
@RequestMapping("/api/")
public class ApiController extends BaseController {

	
    @Value("${wepay.appid}")
    private String appId;

    @Value("${wepay.appSecret}")
    private String secret;
    
    @Value("${game.hostport}")
    private String hostPort;
    
    @Value("${game.ver}")
    private String ver;
    
    @Value("${game.appurl}")
    private String appUrl;
   
    @Value("${game.headimgurl}")
    private String headImgUrl;
    
   
	@Autowired
	private MemberService memberService;
	@Autowired
	private MemcachedClient memcachedClient;
	
	
	@RequestMapping("login.do")
	@ResponseBody
	public Object login(String code,String type,Integer gp,String channel,String site,String deviceid)
	{
		Map<String, Object> map = new HashMap<String, Object>();
        //根据code取accessToken
		SnsToken snsToken=SnsAPI.oauth2AccessToken(appId, secret, code);
		User user=SnsAPI.userinfo(snsToken.getAccess_token(), snsToken.getOpenid(),"zh_CN");
		Memberfides memberFides = getMemberfides(user);		
		memberFides.setGp((byte)gp.intValue());
		String openId=user.getOpenid();
		Memberfides mb=memberService.findMembersBySitemid(openId);
		if(null!=mb){
		   memberService.insertMemberfides(memberFides,openId);
		}
		
        String sesskey=memberService.saveToken(memberFides.getMid(),gp,(int)memberFides.getGp());
        
		map.put("sesskey",sesskey);
		map.put("server",hostPort);
		map.put("sitemid",openId);
		map.put("ver",ver);
		//房间、商城配置文件路径
		map.put("dataUrl",appUrl+"config/");
		//头像路径
		map.put("mobileUrl",headImgUrl);
		//移动活动
		map.put("baseUrl",appUrl+"api/mobile/");

		return this.getReturnData(map,AppConstants.Result.SUCCESS);
	}
	
	
	@RequestMapping("getOrder.do")
	@ResponseBody
	public Object getOrder(String sesskey,String type,Integer money){
		Map<String, Object> map = new HashMap<String, Object>();
		
	    Integer gold=money*10;//后面要调整
	    
		return this.getReturnData(map,AppConstants.Result.SUCCESS);
		
	}


	private Memberfides getMemberfides(User user) {
		Memberfides member=new Memberfides();
		member.setName(user.getNickname());
		if(null!=user.getSex()){
			 member.setSex(user.getSex().byteValue());
		}
		member.setCity(user.getCity());
		member.setIcon(user.getHeadimgurl());
	   //member.setInvite(invite);
	     //member.setGp(();
		member.setMtime(System.currentTimeMillis());
		member.setLxlg(DateUtil.currentTimeToInt());
		return member;
	}
	
	



	
}
