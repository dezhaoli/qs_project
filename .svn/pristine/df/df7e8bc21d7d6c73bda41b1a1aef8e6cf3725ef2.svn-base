package com.qs.webside.api.controller;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.qs.cfg.acti.service.StoreService;
import com.qs.common.base.basecontroller.BaseController;
import com.qs.common.constant.AppConstants;
import com.qs.common.constant.AppConstants.ApplePay;
import com.qs.common.constant.CacheConstan;
import com.qs.common.constant.CommonContants;
import com.qs.common.util.CommonUtils;
import com.qs.common.util.DateUtil;
import com.qs.common.util.EmojiFilter;
import com.qs.common.util.HttpClientUtil;
import com.qs.common.util.IpUtil;
import com.qs.log.game.service.GameRecordService;
import com.qs.webside.api.model.*;
import com.qs.webside.api.service.IAlipayService;
import com.qs.webside.game.model.BaseParam;
import com.qs.webside.game.model.Ipaddress;
import com.qs.webside.game.model.IpaddressUseLog;
import com.qs.webside.game.model.MobileVersion;
import com.qs.webside.game.service.GameService;
import com.qs.webside.member.model.*;
import com.qs.webside.member.service.MemberService;
import com.qs.webside.member.service.PaymentService;
import com.qs.webside.util.AccessToken;
import com.qs.webside.util.ContextUtil;

import jodd.util.StringUtil;
import me.hao0.alipay.model.pay.AppPayDetail;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import weixin.popular.bean.user.User;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.codec.binary.Base64;

@Controller
@Scope("prototype")
@RequestMapping("/api/")
public class MemberController extends BaseController {

    Logger log = Logger.getLogger(MemberController.class);  
    
    @Value("${wepay.appid}")
    private String appId;

    @Value("${wepay.appSecret}")
    private String secret;
    
    @Value("${game.hostport}")
    private String hostPort;
    
    @Value("${game.ver}")
    private String ver;
    
    @Value("${game.activityurl}")
    private String activityUrl;
    
    @Value("${game.configurl}")
    private String configUrl;
    
    @Value("${game.shareurl}")
    private String shareUrl;
    
    @Value("${game.gametype}")
    private int gameType;
   
    @Value("${game.headimgurl}")
    private String headImgUrl;
    
    @Value("${wepay.payNotifyUrl}")
    private String payNotifyUrl;
    
    @Value("${game.javaurl}")
    private String javaUrl;
    
    @Value("${apple.pay}")
    private String applePayUrl;

   
	@Autowired
	private MemberService memberService;
	
    @Resource
    private IAlipayService alipayService;
   
	@Autowired
	private StoreService storeService;
	
	@Autowired
	private GameService gameService;

	@Autowired
	private PaymentService paymentService;
	
	@Autowired
	private GameRecordService gameRecordService;
	
	/**
	 * 数据加载
	 * @param request
	 * @param sesskey
	 * @return
	 */
    @RequestMapping(value = "load.do", method = RequestMethod.POST)
	@ResponseBody
	public Object load(HttpServletRequest request,LoadRequest loadRequst){
		log.debug(loadRequst.toString());
	   Map<String, Object> map = new HashMap<String, Object>();
	   AccessToken token=ContextUtil.getAccessTokenInfo(loadRequst.getSesskey());
	   Memberfides user=memberService.findMemberfidesById(token.getMid());
	   Game game=memberService.findGameById(token.getMid());
	   Commongame commongame=memberService.findCommongameById(token.getMid());
	   Memberagents agent=memberService.findMemberagentsByMid(token.getMid());
	   int is_agent=0;
	   if(null!=agent){
		   is_agent=1;
	   } 
	   Map<String, Object> gameMap = new HashMap<String, Object>();
	   gameMap=ContextUtil.objectToMap(gameMap,game);
	   gameMap=ContextUtil.objectToMap(gameMap,commongame);
	   
	   Integer isdayfrist=1;
	   //String ip = IpUtil.getIpAddr(request);
	   String ip =CommonUtils.getIpAddr(request);
	   log.debug("ip=================::"+ip);
	   if(null==user){
		   user=new Memberfides();
	   }
	   map.put("aUser",user);
	   map.put("aGame",gameMap);
	   map.put("isdayfrist",isdayfrist);
	   map.put("nowtime",String.valueOf(System.currentTimeMillis()));
	   map.put("mUrl",headImgUrl);
	   map.put("ip",ip);
	   map.put("is_show",is_agent);//是否代理商
	   map.put("share",shareUrl); //分享地址
	   map.put("istester",0); //是否活动测试者
	   map.put("isgrant",0); //是否被授权
	   map.put("isroomcard",0);//是否领取房卡

	   return this.getReturnData(map,AppConstants.Result.SUCCESS);
    }
	
	/**
	 * 登录
	 * @param code
	 * @param type
	 * @param gp
	 * @param channel
	 * @param site
	 * @param deviceid
	 * @return
	 */
	@RequestMapping(value = "login.do", method = RequestMethod.POST)
	@ResponseBody
	public Object login(HttpServletRequest request,LoginRequest login)
	{
		log.debug("login.do===::"+login.toString());
		
		if(login.getGp()<=0){
			return this.getReturnData(AppConstants.ResultMsg.NO_GP,AppConstants.Result.FAILURE);
		}
		
		Map<String, Object> map = new HashMap<String, Object>();
		//游客登录
		String unionid=login.getSitemid();
		Memberfides wxUser=null;
		Memberfides resultUser=null;
		// String ip = IpUtil.getIpAddr(request);
		String ip =CommonUtils.getIpAddr(request);
	    //微信登录
		if(login.getType()==1){
	       //根据code取accessToken
			User user=null;
			Map<String, Object> userMap=memberService.getInfoByCode(login.getCode(),login.getGp());
			Boolean result=(Boolean)userMap.get(CommonContants.RESULT);
		    if(result){
		    	 user=(User)userMap.get("user");
		    }else{
		    	//40029,40030为微信登录错误编码
		    	String errcode=(String)userMap.get("errcode");
		    	String errmsg=(String)userMap.get("errmsg");
		    	log.debug("login.do.errcode===:"+errcode);
		    	if("40029".equals(errcode)&&"40030".equals(errcode)){
		    		errcode=errcode;
		    	}else{
		    		errcode="40030";
		    	}
		    	return this.getReturnData(errmsg,Integer.parseInt(errcode));
		    }
			
			wxUser=this.getUserByWxUser(user);		
			//这里取unionid
			unionid=user.getUnionid();
	   }
		
		if(null==wxUser){ 
			//游客登录
			wxUser=new Memberfides();
			wxUser.setName(AppConstants.VISITORNAME);
		}
		
		wxUser.setAddress(ip);
		wxUser.setGp((byte)login.getGp());
		wxUser.setPasswd(login.getDeviceid());
		wxUser.setMtime((long)DateUtil.currentTimeToInt());
		wxUser.setLxlg(DateUtil.currentTimeToInt());
		
		if(StringUtil.isBlank(unionid)){
			return this.getReturnData(AppConstants.ResultMsg.NO_OPENID,AppConstants.Result.FAILURE);
		}
		
		Members mbers=memberService.findMembersBySitemid(unionid);
		//记录不存在、插入数据库
		if(null==mbers){
		
			resultUser=memberService.insertMemberfides(wxUser,unionid);
		}else{
			resultUser=memberService.findMemberfidesById(mbers.getMid());
		    //更新用户信息
			Memberfides updateUser=this.updateUser(wxUser, resultUser,login);
			   if(null!=updateUser){
				   memberService.updateMemberfides(updateUser);
			   }
		}
		
		
		  
		 int userGp=0;
		 int mid=0;
		 if(null!=resultUser){
			 //userGp=resultUser.getGp();
			 mid=resultUser.getMid();
		 }
		 
        String sesskey=memberService.saveToken(mid,login.getGp(),userGp,ip);
    	String dataConfigVersion=gameService.getBaseParamValueByCode(AppConstants.BaseParam.CONFIG_VERSION_CODE);
    	
    	String socketIp=hostPort;
    	//玩牌局数
    	int playCount=gameRecordService.getPlayCount(mid, (byte)gameType);
    	//服务器入口 
    	socketIp = this.getServiceIp(socketIp, playCount,ip,mid,gameType);
    	
    	if(StringUtils.isBlank(socketIp)){
    		socketIp=hostPort;
    	}
    	
    	log.debug("playCount====  ===::"+playCount);
    	
		map.put("sesskey",sesskey);
		String hostServer = new String(Base64.encodeBase64(socketIp.getBytes()));
		map.put("server",hostServer);
		map.put("sitemid",unionid);
	    map.put("ver",dataConfigVersion);
		//map.put("ver",ver);
		//房间、商城配置文件路径
		map.put("dataUrl",configUrl+"config/");
		//活动图片
		map.put("mobileUrl",headImgUrl);
		//移动活动
		map.put("baseUrl",activityUrl+"api/mobile/");
		map.put("appleStore",gameService.getBaseParamValueByCode(AppConstants.BaseParam.IS_OPEN_APPLE_STORE));

		return this.getReturnData(map,AppConstants.Result.SUCCESS);
	}
    /**
     * 服务器入口  
     * @param socketIp
     * @param playCount
     * @return
     */
	private String getServiceIp(String socketIp, int playCount,String ip,int mid,int gameType) {
		Ipaddress ipaddress=null;
		
		String city= this.getCity(ip);
		
		String  province="广东";
		if(gameType==5){
			province="四川";
		}else if(gameType==6){
			province="广东";
		}else if(gameType==7){
			province="贵州";
		}else if(gameType==20){
			province="江西";
		}
		
		 //非广东/或者四川
		if(!StringUtils.isBlank(city)&&!city.startsWith(province)){
			if(playCount<9){
		   		 ipaddress=gameService.findIpaddressByType(AppConstants.IpType.N1);
		     	 if(null!=ipaddress){
		     		   socketIp=ipaddress.getIpstring();
		     		
		     	}
		 	   }else if(playCount<199){
		    		 ipaddress=gameService.findIpaddressByType(AppConstants.IpType.N2);
		        	if(null!=ipaddress){
		        		   socketIp=ipaddress.getIpstring();
		        		
		        	}
		    	}else if(playCount>=199){
		    		 ipaddress=gameService.findIpaddressByType(AppConstants.IpType.N3);
		        	if(null!=ipaddress){
		        		   socketIp=ipaddress.getIpstring();
		        		
		        	}
		    	}
	        
		}else if(playCount<1){
   		 ipaddress=gameService.findIpaddressByType(AppConstants.IpType.L1);
     	 if(null!=ipaddress){
     		   socketIp=ipaddress.getIpstring();
     		
     	}
 	   }else if(playCount<9){
    		 ipaddress=gameService.findIpaddressByType(AppConstants.IpType.L2);
        	if(null!=ipaddress){
        		   socketIp=ipaddress.getIpstring();
        		
        	}
    	}else if(playCount<27){
    		 ipaddress=gameService.findIpaddressByType(AppConstants.IpType.L3);
        	if(null!=ipaddress){
        		   socketIp=ipaddress.getIpstring();
        		
        	}
    	}else if(playCount<49){
    		 ipaddress=gameService.findIpaddressByType(AppConstants.IpType.L4);
        	if(null!=ipaddress){
        		   socketIp=ipaddress.getIpstring();
        		
        	}
    	}else if(playCount<199){
    		 ipaddress=gameService.findIpaddressByType(AppConstants.IpType.L5);
        	if(null!=ipaddress){
        		   socketIp=ipaddress.getIpstring();
        		
        	}
    	}else if(playCount<599){
    		 ipaddress=gameService.findIpaddressByType(AppConstants.IpType.L6);
        	if(null!=ipaddress){
        		   socketIp=ipaddress.getIpstring();
        		
        	}
    	}else if(playCount<999){
    		 ipaddress=gameService.findIpaddressByType(AppConstants.IpType.L7);
        	if(null!=ipaddress){
        		   socketIp=ipaddress.getIpstring();
        		
        	}
    	}else if(playCount<1499){
    		 ipaddress=gameService.findIpaddressByType(AppConstants.IpType.L8);
        	if(null!=ipaddress){
        		   socketIp=ipaddress.getIpstring();
        		
        	}
    	}else if(playCount<2499){
    		 ipaddress=gameService.findIpaddressByType(AppConstants.IpType.L9);
        	if(null!=ipaddress){
        		   socketIp=ipaddress.getIpstring();
        		
        	}
    	}else if(playCount>=2499){
   		 ipaddress=gameService.findIpaddressByType(AppConstants.IpType.L10);
     	 if(null!=ipaddress){
     		   socketIp=ipaddress.getIpstring();
     		
     	}
 	   }else{
    		 ipaddress=gameService.findIpaddressByType(AppConstants.IpType.L1);
        	if(null!=ipaddress){
        		   socketIp=ipaddress.getIpstring();
        		
        	}
    	}
		
		if(null==ipaddress){
			  ipaddress=gameService.findIpaddressByType(AppConstants.IpType.L1);
	          if(null!=ipaddress){
	              socketIp=ipaddress.getIpstring();
	           }
	    	  if(null==ipaddress){
		   	    ipaddress=new Ipaddress();
	    	 }
		}
		
		
		//保存日志
		IpaddressUseLog record=new IpaddressUseLog();
		record.setMid(mid);
		record.setIpstring(StringUtils.isBlank(socketIp)?hostPort:socketIp);
		record.setName(StringUtils.isBlank(ipaddress.getName())?"L1":ipaddress.getName());
		record.setType(StringUtils.isBlank(ipaddress.getType())?"L1":ipaddress.getType());
		record.setUsetime(new Date());
		record.setLoginIp(ip);
		gameService.saveIpaddressUseLog(record);
		
		return socketIp;
	}
    /**
     * 更新用户信息
     * @param wxUser
     * @param resultUser
     */
	private Memberfides updateUser(Memberfides wxUser, Memberfides resultUser,LoginRequest login) {
		boolean isUpdate=false;
		Memberfides updateUser=new Memberfides();
		
		if(null!=wxUser&&null!=resultUser){
			updateUser.setMid(resultUser.getMid());
		    if(!StringUtils.isBlank(wxUser.getIcon())){
		    	if(!wxUser.getIcon().equals(resultUser.getIcon())){
		    		isUpdate=true;
		    		updateUser.setIcon(wxUser.getIcon());
		    	}
				
			}
		   if(null!=wxUser.getSex()){
				if(!wxUser.getSex().equals(resultUser.getSex())){
					isUpdate=true;
					updateUser.setSex(wxUser.getSex());
				}
			}
		   
		   if(!StringUtils.isBlank(wxUser.getName())){
		      if(!wxUser.getName().equals(resultUser.getName())){		    		
		    	  isUpdate=true;
				  updateUser.setName(wxUser.getName());
		      }
			}
		   
		   if(!StringUtils.isBlank(wxUser.getIdentity())){
			   if(StringUtils.isBlank(resultUser.getIdentity())){	    		
			    	  isUpdate=true;
					  updateUser.setIdentity(wxUser.getIdentity());
			      }
				}
		   
		   if(!StringUtils.isBlank(login.getDeviceid())){
			      if(!login.getDeviceid().equals(resultUser.getPasswd())){		    		
			    	  isUpdate=true;
					  updateUser.setPasswd(login.getDeviceid());
			      }
				}
		
			
		}
		if(isUpdate){
			return updateUser;
		}else{
			return null;
		}
		
	}
	/**
	 * 微信用户转游戏用户
	 * @param user
	 * @return
	 */
	private Memberfides getUserByWxUser(User user) {
		Memberfides member=new Memberfides();
		member.setName(EmojiFilter.filterEmoji(user.getNickname()));
		member.setSex(CommonUtils.getSex(user.getSex()));
		member.setCity(user.getProvince()+user.getCity());
		member.setIcon(user.getHeadimgurl());
		//设置游戏openid
		member.setIdentity(user.getOpenid());
		return member;
	}
	
	/***
	 * 订单
	 * @param sesskey
	 * @param type
	 * @param money
	 * @return
	 */
	@RequestMapping(value = "getOrder.do", method = RequestMethod.POST)
	@ResponseBody
	public Object getOrder(OrderRequest orderRequest){
		
		log.debug("getOrder.do==::"+orderRequest.toString());
		
		Map<String, Object> map = new HashMap<String, Object>();
		String queryString="";
		String cardid="1";
	
		AccessToken token=ContextUtil.getAccessTokenInfo(orderRequest.getSesskey());
		int money=orderRequest.getMoney();
		String  type=orderRequest.getType();
		
		if(AppConstants.PayType.APPLEPAY.equals(type)&&!StringUtils.isBlank(orderRequest.getIosstring())){
			 log.debug("orderRequest.getIosstring()=======================::"+orderRequest.getIosstring());
			//苹果支付回调验证
		    return applePayVerify(orderRequest,queryString, cardid);
		}
		
		if(StringUtils.isBlank(type)){
			type=AppConstants.PayType.WXPAY;
		}
		
		if(orderRequest.getMoney()>1000||money<1){
			return this.getReturnData(map,AppConstants.Result.FAILURE);
	     }
		
		Memberfides user=memberService.findMemberfidesById(token.getMid());
		Commongame commongame=memberService.findCommongameById(token.getMid());
		if(null==user||null==commongame){
			return this.getReturnData(map,AppConstants.Result.FAILURE);
		}
		Integer gold=0;
		gold=storeService.getGoldByPayMoney(money);
		if(gold<=0){
			return this.getReturnData(map,AppConstants.Result.FAILURE_1002);
		}
		
		Memberpayment record=new Memberpayment();
		record.setFmid(token.getMid());
		record.setTmid(token.getMid());
		record.setTsid(user.getGp().intValue());
		record.setPmoneynow(commongame.getGold().intValue());
		record.setPcard(token.getGb().shortValue());
		record.setPamount((float)money);
		record.setPcoins(gold);
		record.setPtime(DateUtil.currentTimeToInt());
		record.setPstatus((byte)0);
		record.setPtransno("");
		record.setGametype((byte)gameType);
		record.setParentid(0);
		record.setIsagent((byte)0);
		record.setBizid((short)0);
	
		if(AppConstants.PayType.ALIPAY.equals(type)){
			record.setPmode((byte)1);
			Integer c=paymentService.insertMemberpayment(record);
			Integer orderId =record.getPid();
	        String orderNameAndBody = gold+ AppConstants.COINNAME;
	        AppPayDetail appPayDetail = new AppPayDetail(String.valueOf(orderId), orderNameAndBody,String.valueOf(money), orderNameAndBody);
	        queryString=alipayService.appPay(appPayDetail);
	        
		}else if(AppConstants.PayType.WXPAY.equals(type)){
			record.setPmode((byte)6);
			Integer orderId=paymentService.insertMemberpayment(record);	
			queryString=payNotifyUrl;
			cardid=String.valueOf(record.getPid());
		}else if(AppConstants.PayType.APPLEPAY.equals(type)){
			record.setPmode((byte)4);
			String iostoken =orderRequest.getIosstring();
			//产生订单
			if(StringUtils.isBlank(iostoken)){
				Integer orderId=paymentService.insertMemberpayment(record);	
				queryString=record.getPid()+"";
			}else{  
				//苹果支付回调验证
			    return applePayVerify(orderRequest,queryString, cardid);
	
		 }
				
			
			
		}
		
		map.put("string",queryString);
		map.put("cardid",cardid);
		return this.getReturnData(map,AppConstants.Result.SUCCESS);
	
		
	}
    /**
     * 苹果支付回调验证
     * @param orderRequest
     * @param queryString
     * @param cardid
     * @return
     */
	private Object applePayVerify(OrderRequest orderRequest,String queryString, String cardid) {
	  	 
		  Map<String, Object> map = new HashMap<String, Object>();
	  	  String iostoken =orderRequest.getIosstring();
		   //发货(不带cardid)
		  int orderId=orderRequest.getOrderid();
		  if(orderId<=0){
			  return this.getReturnData(map,AppConstants.Result.FAILURE_1002);
		  }
		  if(StringUtils.isBlank(iostoken)){
			  return this.getReturnData(map,AppConstants.Result.FAILURE_1002);
		  }
		  String payUrl=applePayUrl;
		  if(StringUtils.isBlank(payUrl)){
			  payUrl=AppConstants.ApplePay.SANDBOX;
		  }
		  		
		 String checkVer=gameService.getBaseParamValueByCode(AppConstants.BaseParam.IOS_VERSION_CODE);
		 if(!StringUtils.isBlank(checkVer)&&checkVer.equals(orderRequest.getVer())){
			 payUrl=AppConstants.ApplePay.SANDBOX;
		 }
		 
		 JSONObject payJson=new JSONObject();
		 payJson.put("receipt-data",iostoken);
		 String jsonString= payJson.toJSONString();
		 String verifyResult=HttpClientUtil.sendPost(payUrl, jsonString);
		 log.debug("verifyResult=======================::"+verifyResult);
		 if(StringUtils.isBlank(verifyResult)){
			//充值失败
			 return this.getReturnData(map,AppConstants.Result.FAILURE_1004);
		 }else{
			 
			 //跟苹果验证有返回结果------------------  
		        JSONObject payJsonAll = JSONObject.parseObject(verifyResult);
		        String status=payJsonAll.getString("status");  
		        //沙箱充值失败,21007再试一次
		        if("21007".equals(status)){
		        	payUrl=AppConstants.ApplePay.SANDBOX;
		        	String verifyResult2=HttpClientUtil.sendPost(payUrl, jsonString);
		        	log.debug("verifyResult2=======================::"+verifyResult2);
		        }
		        
		        if(!"0".equals(status)){
		        	//充值失败
				   return this.getReturnData(map,AppConstants.Result.FAILURE_1004);
		        }
		        
		        String receipt=payJsonAll.getString("receipt");  
		        JSONObject returnJson = JSONObject.parseObject(receipt);
		        
		        Memberpayment orderPay=paymentService.findMemberpaymentById(orderId);
		        if(null==orderPay){
		        	return this.getReturnData(map,AppConstants.Result.FAILURE_1009);
		        }
		       if(orderPay.getPstatus()==2){
		      	 //重复发货
		    	   logger.error("getOrder.do==重复发货"); 
		    		return this.getReturnData(map,AppConstants.Result.FAILURE_1007);
		      }
		       
		       //产品ID  
		       String product_id=returnJson.getString("product_id");  
		       String ptransno=returnJson.getString("transaction_id");  
		       String bid=returnJson.getString("bid"); 
		       
		       byte pstatus=2;
		       int c=paymentService.updateFinishMemberpayment(orderId, pstatus,ptransno);
		       if(c>0){
		    	   log.debug("apple success=======================::"+c);
		       }else{
		       	   logger.error("wxNotify.do===支付失败::"+c);
		       }
		    
			  
		  }
		 
			map.put("string",queryString);
			map.put("cardid",cardid);
			return this.getReturnData(map,AppConstants.Result.SUCCESS);
	}
	
	
	/**
	 * APP强更新和热更新
	 * @param sesskey
	 * @param type
	 * @param money
	 * @return
	 */
	@RequestMapping("getAutoUpdateInfo.do")
	@ResponseBody
	public Object getAutoUpdateInfo(MobileVersionRequest mobileVersionRequest){
		
		log.debug(mobileVersionRequest.toString());
		
		Map<String, Object> map = new HashMap<String, Object>();
		int site=mobileVersionRequest.getSite()==2 ? 2 : 1;//1安卓2苹果
		BaseParam baseParam=null;
		String baseParamVersionValue=null;
		String deviceid=mobileVersionRequest.getDeviceid();
		String returnJavaUrl=javaUrl;
		int isTester=0;
		int isIosCheckVersion=0;
		
        
		
		//ios审核的版本号
		if(site==2){
			baseParamVersionValue=gameService.getBaseParamValueByCode(AppConstants.BaseParam.IOS_VERSION_CODE);
			if(!StringUtils.isBlank(baseParamVersionValue)&&baseParamVersionValue.contains(CommonUtils.checkNull(mobileVersionRequest.getAppversion()))){
				isIosCheckVersion=1;
			}
		}else{
			baseParamVersionValue=gameService.getBaseParamValueByCode(AppConstants.BaseParam.ANDROID_VERSION_CODE);
		}
		
		map.put("checkver",baseParamVersionValue);
		
		Map<String, Object> paraMap = new HashMap<String, Object>();
		paraMap.put("site",mobileVersionRequest.getSite());
		paraMap.put("channel",mobileVersionRequest.getChannel());
	    
		String cacheKey=AppConstants.RedisKeyPrefix.APP_VERSION+mobileVersionRequest.getSite()+"_"+mobileVersionRequest.getChannel()+"_"+AppConstants.AppVersionType.STRONG;
		
		//强更新
		paraMap.put("type",AppConstants.AppVersionType.STRONG);
		MobileVersion strongVersion= gameService.findLatestMobileVersion(paraMap,cacheKey);
		
		if(null!=strongVersion&&!StringUtils.isBlank(strongVersion.getForceurl())){
		   if(strongVersion.getBigversion()>mobileVersionRequest.getBigversion()){
				return returnMobileVersionMap(mobileVersionRequest, map, strongVersion,false,returnJavaUrl,isTester,isIosCheckVersion);	
		   }else if(strongVersion.getBigversion()==mobileVersionRequest.getBigversion()&&strongVersion.getVersion()>=mobileVersionRequest.getVersion()){
			   return returnMobileVersionMap(mobileVersionRequest, map, strongVersion,false,returnJavaUrl,isTester,isIosCheckVersion);	
		   }
		}
		
		
		//测试
		paraMap.put("type",AppConstants.AppVersionType.TEST);
		cacheKey=AppConstants.RedisKeyPrefix.APP_VERSION+mobileVersionRequest.getSite()+"_"+mobileVersionRequest.getChannel()+"_"+AppConstants.AppVersionType.TEST;
		MobileVersion testVersion= gameService.findLatestMobileVersion(paraMap,cacheKey);
		if(null!=testVersion&&!StringUtils.isBlank(testVersion.getUrlTest())){
			if(!StringUtils.isBlank(deviceid)&&!StringUtils.isBlank(testVersion.getDevicelistTest())){
		    	if(testVersion.getDevicelistTest().contains(deviceid)){
		    		isTester=1;
		    		//isTester=0;
			    if(testVersion.getBigversion()>mobileVersionRequest.getBigversion()){
					return returnMobileVersionMap(mobileVersionRequest, map, testVersion,true,returnJavaUrl,isTester,isIosCheckVersion);	
			   }else if(testVersion.getBigversion()==mobileVersionRequest.getBigversion()&&testVersion.getVersion()>=mobileVersionRequest.getVersion()){
				   return returnMobileVersionMap(mobileVersionRequest, map, testVersion,true,returnJavaUrl,isTester,isIosCheckVersion);	
			   }
		    	}
		    	}
				
			}
		
		//没有强更、就热更新
		paraMap.put("type",AppConstants.AppVersionType.FORMAL);
		cacheKey=AppConstants.RedisKeyPrefix.APP_VERSION+mobileVersionRequest.getSite()+"_"+mobileVersionRequest.getChannel()+"_"+AppConstants.AppVersionType.FORMAL;
	    MobileVersion formalVersion= gameService.findLatestMobileVersion(paraMap,cacheKey);
		
		if(null!=formalVersion&&!StringUtils.isBlank(formalVersion.getUrl())){
		   if(formalVersion.getBigversion()>mobileVersionRequest.getBigversion()){
				return returnMobileVersionMap(mobileVersionRequest, map, formalVersion,false,returnJavaUrl,isTester,isIosCheckVersion);	
		   }else if(formalVersion.getBigversion()==mobileVersionRequest.getBigversion()&&formalVersion.getVersion()>=mobileVersionRequest.getVersion()){
			   return returnMobileVersionMap(mobileVersionRequest, map, formalVersion,false,returnJavaUrl,isTester,isIosCheckVersion);	
		   }
			
		}
	
		//更新失败
		return this.getReturnMobileVersionData(map, AppConstants.Result.FAILURE,returnJavaUrl,isTester,isIosCheckVersion);	
  }
	private Object returnMobileVersionMap(MobileVersionRequest mobileVersionRequest, Map<String, Object> map,
			MobileVersion sMobileVersion,boolean isTest,String url,int isTester,int isIosCheckVersion) {
	
		map.put("bigversion",mobileVersionRequest.getBigversion());
		map.put("version", mobileVersionRequest.getVersion());
		map.put("isskip", sMobileVersion.getIsskip());
		map.put("des",sMobileVersion.getDes());
		if(isTest){
		  //测试地址
		  map.put("url",sMobileVersion.getUrlTest());	
		}else{
			map.put("url",sMobileVersion.getUrl());
		}
		map.put("onlineversion",sMobileVersion.getOnlineversion());
		map.put("forceurl",sMobileVersion.getForceurl());
		
		  return this.getReturnMobileVersionData(map,AppConstants.Result.SUCCESS,url,isTester,isIosCheckVersion);
	}	
	
	
	public Map<String, Object> getReturnMobileVersionData(Object data,int resultFlag,String url,int isTester,int isIosCheckVersion){
		Map<String, Object> parameters=new HashMap<String, Object>();
		parameters.put("svflag",resultFlag);
		//列表展示数据
		parameters.put("data", data);
		parameters.put("javaurl",url);
		parameters.put("istester",isTester);
		parameters.put("isioscheckversion",isIosCheckVersion);
		return parameters;
		
	}
	
	
	/**
	 * 获取包直接地址
	 * @param baseRequest
	 * @return
	 */
	@RequestMapping(value = "getApkUrl.do", method = RequestMethod.POST)
	@ResponseBody
	public Object getApkUrl(BaseRequest baseRequest){
		
		log.debug(baseRequest.toString());
		
		Map<String, Object> resultMap = new HashMap<String, Object>();
		Integer status = 1;
		//判断是否测试服务器
		//Integer status = 0;
		String url="";
		
		resultMap.put("url",url);
		resultMap.put("ver","");
	   return this.getReturnData(resultMap,AppConstants.Result.SUCCESS);
	}
	
	/**
	 * 获取用户信息
	 * @param baseRequest
	 * @return
	 */
	@RequestMapping(value = "getMemBasInfo.do", method = RequestMethod.POST)
	@ResponseBody
	public Object getMemBasInfo(BaseRequest baseRequest){
		
		log.debug(baseRequest.toString());
		
		AccessToken token=ContextUtil.getAccessTokenInfo(baseRequest.getSesskey());
		Map<String, Object> cityMap = new HashMap<String, Object>();
		Memberfides mUser=memberService.findMemberfidesById(token.getMid());
		Map<String, Object> resultMap = new HashMap<String, Object>();
		cityMap.put("city",mUser.getCity());
		resultMap.put("arr", cityMap);
		return this.getReturnData(resultMap,AppConstants.Result.SUCCESS);
	}
	



}
