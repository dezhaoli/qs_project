package com.qs.webside.api.controller;

import com.qs.common.base.basecontroller.BaseController;
import com.qs.webside.api.service.IWePayService;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import weixin.popular.api.PayMchAPI;
import weixin.popular.api.TicketAPI;
import weixin.popular.bean.paymch.*;
import weixin.popular.bean.ticket.Ticket;
import weixin.popular.support.ExpireKey;
import weixin.popular.support.expirekey.DefaultExpireKey;
import weixin.popular.util.*;

import javax.annotation.Resource;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

@Controller
@Scope("prototype")
@RequestMapping("/api/wx/")
public class WeixinController extends BaseController {

    @Resource
    private IWePayService wePayService;


    //1.统一下单
    // 商户系统先调用该接口在微信支付服务后台生成预支付交易单，
    // 返回正确的预支付交易回话标识后再在APP里面调起支付。
    @RequestMapping(value = "/unified/order", method = RequestMethod.POST)
    @ResponseBody
    public MchPayApp unifiedOrder(HttpServletRequest request, HttpServletResponse response){
        //payPackage 的商品信息，总价可以通过前端传入
        return wePayService.unifiedOrder(request, response);
    }


    //2.支付回调通知
    @RequestMapping(value = "/pay/notify", method = RequestMethod.POST)
    public void payNotify(HttpServletRequest request, HttpServletResponse response) throws IOException {
       wePayService.payNotify(request,response);
    }


    /**
     * {
     * +                    debug: true,//debug: true,
     * +                    appId: appId,
     * +                    timestamp: timestamp,
     * +                    nonceStr: nonceStr,
     * +                    signature: signature,
     * +                    jsApiList: [
     * +                        'checkJsApi',
     * +                        'chooseImage',
     * +                        'openLocation',
     * +                        'getLocation',
     * +                        'onMenuShareTimeline',
     * +                        'onMenuShareAppMessage',
     * +                        'onMenuShareQQ'
     * +                    ]
     * +                }
     *
     * @return
     */
    //3.生成 config接口注入权限验证 JSON
    @RequestMapping(value = "/get/signture", method = RequestMethod.GET)
    public String createJsapiSignature(String access_token, Model model) {
        String url = "";
        Ticket ticket = TicketAPI.ticketGetticket(access_token, "jsapi");
        String wxConfig = JsUtil.generateConfigJson(ticket.getTicket(), true, "appid",
                url, "調用的接口數組");
        model.addAttribute("config", wxConfig);
        return "redirect:url";
    }


}
