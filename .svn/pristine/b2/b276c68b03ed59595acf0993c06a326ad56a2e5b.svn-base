package com.qs.webside.interceptor;

import java.io.IOException;
import java.io.Writer;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.qs.common.constant.AppConstants;
import com.qs.common.util.CommonUtils;
import com.qs.webside.util.AccessToken;
import com.qs.webside.util.ContextUtil;
import net.rubyeye.xmemcached.MemcachedClient;




public class TokenInterceptor  implements HandlerInterceptor {

    private static final Logger logger = LoggerFactory.getLogger(TokenInterceptor.class);

	@Autowired
	private MemcachedClient memcachedClient;

 

    @Override
    public boolean preHandle(HttpServletRequest request,    
            HttpServletResponse response, Object handler) throws Exception {
		if (true) return true;
        String sesskey = (String) request.getParameter("sesskey");
        logger.debug("sesskey===::"+sesskey);
        
    	if(StringUtils.isBlank(sesskey)){
    		Map<String, Object> responseMap=this.getReturnData(AppConstants.ResultMsg.PARA_SESSKEY_ISNULL,AppConstants.Result.FAILURE_3);
    	   this.responseMessage(response, responseMap);
    	   return false;
    	}
        AccessToken token=ContextUtil.getAccessTokenInfo(sesskey);
    	if(CommonUtils.checkIntegerNull(token.getMid())==0){
    		Map<String, Object> responseMap=this.getReturnData(AppConstants.ResultMsg.NO_MID,AppConstants.Result.FAILURE_3);
    	   this.responseMessage(response, responseMap);
    	   return false;
    	}
        
    	String tokenKey=AppConstants.MemcacheKeyPrefix.SESSKEY+token.getMid();
    	
    	String tokenValue=memcachedClient.get(tokenKey);
    	 logger.debug("tokenValue===::"+tokenValue);
    	if(StringUtils.isBlank(tokenValue)){
    		Map<String, Object> responseMap=this.getReturnData(AppConstants.ResultMsg.NO_SESSKEY,AppConstants.Result.FAILURE_3);
    	   this.responseMessage(response, responseMap);
    	   return false;
    	}
    	
    	  return true;
    	

    }
    
	/**
	 * app返回值
	 * @param data
	 * @param resultFlag
	 * @return
	 */
	public  Map<String, Object> getReturnData(Object data,int resultFlag){
		Map<String, Object> parameters=new HashMap<String, Object>();
		parameters.put("svflag",resultFlag);
		//列表展示数据
		parameters.put("data", data);
		return parameters;
		
	}

    private void responseMessage(HttpServletResponse response, Map<String,Object> responseMap) {
        response.setCharacterEncoding("UTF-8");
        response.setContentType("application/json");
        Writer os = null;
        try {
            os = response.getWriter();
            os.write(new ObjectMapper().writeValueAsString(responseMap));
            os.flush();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            IOUtils.closeQuietly(os);
        }
    }

	@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
			ModelAndView modelAndView) throws Exception {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
			throws Exception {
		// TODO Auto-generated method stub
		
	}

}
