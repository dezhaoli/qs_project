package com.qs.webside.member.service.impl;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import com.qs.common.constant.AppConstants;
import com.qs.common.constant.CommonContants;
import com.qs.common.util.CommonUtils;
import com.qs.common.util.crypto.MD5;
import com.qs.log.game.service.GameRecordService;
import com.qs.webside.game.service.GameService;
import com.qs.webside.member.mapper.CommongameMapper;
import com.qs.webside.member.mapper.GameMapper;
import com.qs.webside.member.mapper.MemberfidesMapper;
import com.qs.webside.member.mapper.MemberpaymentMapper;
import com.qs.webside.member.mapper.MembersMapper;
import com.qs.webside.member.model.Commongame;
import com.qs.webside.member.model.Game;
import com.qs.webside.member.model.Memberagents;
import com.qs.webside.member.model.Memberbusiness;
import com.qs.webside.member.model.Memberfides;
import com.qs.webside.member.model.Memberpayment;
import com.qs.webside.member.model.Memberpayment;
import com.qs.webside.member.model.Members;
import com.qs.webside.member.service.MemberService;

import net.rubyeye.xmemcached.MemcachedClient;
import net.rubyeye.xmemcached.exception.MemcachedException;
import weixin.popular.api.SnsAPI;
import weixin.popular.bean.sns.SnsToken;
import weixin.popular.bean.user.User;
import com.qs.webside.member.mapper.MemberagentsMapper;
import com.qs.webside.member.mapper.MemberbusinessMapper;


@Service("memberService")
public class MemberServiceImpl implements MemberService {
	
    Logger log = Logger.getLogger(MemberServiceImpl.class);  

	@Autowired
	private MemberfidesMapper memberfidesMapper;
	
	@Autowired
	private MembersMapper membersMapper;
	
	@Autowired
	private CommongameMapper commongameMapper;
	
	@Autowired
	private GameMapper gameMapper;
	
	@Autowired
	private MemcachedClient memcachedClient;
	
	@Autowired
	private MemberpaymentMapper memberpaymentMapper;
	@Autowired
	private MemberagentsMapper memberagentsMapper;
	@Autowired
	private MemberbusinessMapper memberbusinessMapper;
	
	@Autowired
	private GameService gameService;
	@Autowired
	private RedisTemplate redisTemplate;
	@Autowired
	private GameRecordService gameRecordService;

    @Value("${wepay.appid}")
    private String appId;

    @Value("${wepay.appSecret}")
    private String secret;
    
	
    @Value("${game.gametype}")
    private byte gameType;
	
	/**
	 * 保存token
	 * id 登录 rgb注册,type游戏
	 * @param mid
	 * @param sid
	 * @param rgp
	 * @return
	 */
	@Override
	public String saveToken(Integer mid,Integer gp,Integer uerGp,String ip){
		String key=AppConstants.MemcacheKeyPrefix.SESSKEY+mid;
		String ipKey=AppConstants.MemcacheKeyPrefix.IP+mid;
		String istestuser="0";
		long motime=System.currentTimeMillis();
		String sign=MD5.encrypt(mid+"#"+motime+"#"+AppConstants.SAFECODE);
		String mokey=mid+"-"+motime+"-"+gp+"-"+sign+"-"+uerGp+"-"+gameType;
		log.debug("mokey==========::"+mokey);
		try {
			memcachedClient.set(key,6*3600, mokey);
			memcachedClient.set(ipKey,6*3600, ip);
		} catch (TimeoutException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (MemcachedException e) {
			e.printStackTrace();
		}
		return mokey;
	}
   
	@Override
	public Memberfides insertMemberfides(Memberfides record,String openId) {
		Members  member=new Members();
		member.setSitemid(openId);
		int result=membersMapper.insert(member);
		int mid=member.getMid();
		log.debug("member.getmid==========::"+member.getMid());
		
		if(null==record){
			record=new Memberfides();
			record.setName(AppConstants.VISITORNAME);
		}
		record.setMid(mid);
		memberfidesMapper.insertSelective(record);
		
		Long sendGold=CommonUtils.checkLongNull(gameService.getBaseParamValueByCode(AppConstants.BaseParam.REGISTERSEND_GOLD_CODE));
		
		Long gold=sendGold>0?sendGold:5;
		Commongame commongame=new Commongame();
		commongame.setMid(mid);
		commongame.setGold(gold);
		commongame.setVip((byte)0);
		commongame.setBankpasswd("");
		commongame.setBankassets(0l);
		commongameMapper.insertSelective(commongame);
		 //更新金币日志
		 byte action = 0;
		 byte goldLogType=AppConstants.GoldLogSourceType.ADD_USER_SEND;
		 gameRecordService.saveGoldLog(mid,gold, gold,goldLogType,action);
		
		//从配置文件取数据
		Game game=new Game();
		game.setMid(mid);
		game.setJifen(0l);
		game.setType((int)gameType);
		gameMapper.insertSelective(game);
		
		return record;
	}

	@Override
	public Memberfides findMemberfidesById(Integer id) {
		return memberfidesMapper.selectByPrimaryKey(id);
	}

	@Override
	public int updateMemberfides(Memberfides record) {
		return memberfidesMapper.updateByPrimaryKeySelective(record);
	}

	@Override
	public int deleteMemberfidesById(Integer id) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public Members findMembersBySitemid(String sitemid) {
		return membersMapper.findMembersBySitemid(sitemid);
	}

	@Override
	public int insertMemberpayment(Memberpayment record) {
		return memberpaymentMapper.insert(record);
	}

	@Override
	public Game findGameById(Integer id) {
		return gameMapper.selectByPrimaryKey(id);
	}

	@Override
	public Commongame findCommongameById(Integer id) {
		return commongameMapper.selectByPrimaryKey(id);
	}

	@Override
	public Map<String, Object> getInfoByCode(String code) {
		User user=null;
		Map<String, Object> map = new HashMap<String, Object>();
		
		String tokenCode=AppConstants.RedisKeyPrefix.REFRESH_TOKEN+code;
		String refreshToken=(String)redisTemplate.opsForValue().get(AppConstants.RedisKeyPrefix.REFRESH_TOKEN+code);
		if(null!=refreshToken){
			 SnsToken snsToken=SnsAPI.oauth2RefreshToken(appId, refreshToken);
			 log.debug("oauth2RefreshToken===:"+snsToken.toString());
			 if(!StringUtils.isBlank(snsToken.getErrcode())){
				 map.put(CommonContants.RESULT,Boolean.FALSE);
				 map.put("errcode",snsToken.getErrcode());
				 map.put("errmsg", snsToken.getErrmsg());
				 return map;
			 }
			 user=SnsAPI.userinfo(snsToken.getAccess_token(), snsToken.getOpenid(),"zh_CN");
			 log.debug("oauth2RefreshToken-userinfo==:="+user.toString());
			 if(!StringUtils.isBlank(user.getErrcode())){
				 map.put(CommonContants.RESULT,Boolean.FALSE);
				 map.put("errcode",user.getErrcode());
				 map.put("errmsg", user.getErrmsg());
				 return map;
			 }
			
			 redisTemplate.opsForValue().set(tokenCode,snsToken.getRefresh_token(),15*24*3600,TimeUnit.SECONDS);
			
		}else{
			 SnsToken snsToken=SnsAPI.oauth2AccessToken(appId, secret,code);
			 log.debug("SnsAPI.oauth2AccessToken===:"+snsToken.toString());
			 if(!StringUtils.isBlank(snsToken.getErrcode())){
				 map.put(CommonContants.RESULT,Boolean.FALSE);
				 map.put("errcode",snsToken.getErrcode());
				 map.put("errmsg", snsToken.getErrmsg());
				 return map;
			 }
			 user=SnsAPI.userinfo(snsToken.getAccess_token(), snsToken.getOpenid(),"zh_CN");
			 log.debug("oauth2AccessToken-SnsAPI.userinfo===:"+user.toString());
			 if(!StringUtils.isBlank(user.getErrcode())){
				 map.put(CommonContants.RESULT,Boolean.FALSE);
				 map.put("errcode",user.getErrcode());
				 map.put("errmsg", user.getErrmsg());
				 return map;
			 }
			redisTemplate.opsForValue().set(tokenCode,snsToken.getRefresh_token(),29*24*3600,TimeUnit.SECONDS);
		};
		
		map.put(CommonContants.RESULT,Boolean.TRUE);
		map.put("user",user);
		
		return map;
	}

	@Override
	public int updateCommongame(Commongame record) {
		return commongameMapper.updateByPrimaryKeySelective(record);
	}

	@Override
	public Memberagents findMemberagentsByMid(Integer mid) {
		return memberagentsMapper.findMemberagentsByMid(mid);
	}
	
	/**
	 * 完成支付
	 * @param record
	 * @return
	 */
	@Override
	public int updateFinishMemberpayment(int pid,byte pstatus,String ptransno) {
		Memberpayment orderPayment=memberpaymentMapper.selectByPrimaryKey(pid);
        int paymentStatus=CommonUtils.checkIntegerNull(orderPayment.getPstatus());
		if(null==orderPayment.getFmid()||paymentStatus!=0){
			return 0;
		}
		//更新支付模式
		Memberpayment updatePayment=new Memberpayment();
		updatePayment.setPid(pid);
		short businessId=0;
		Memberfides userRecord=memberfidesMapper.selectByPrimaryKey(orderPayment.getTmid());
		if(CommonUtils.checkIntegerNull(userRecord.getInvite())>0){
			Memberagents agentsRecord=memberagentsMapper.findMemberagentsByMid(orderPayment.getTmid());
			Memberagents parentAgent=null;
			byte isAgent=0;
			if(null!=agentsRecord){
				isAgent=1;
			}
			if(isAgent==0){ //非代理商，找出上级的所属商务
				 parentAgent=memberagentsMapper.findMemberagentsByMid(userRecord.getInvite());
                 businessId=parentAgent.getBelongid();
			}else{
				businessId=agentsRecord.getBelongid();
			}
			 updatePayment.setParentid(userRecord.getInvite());
			 updatePayment.setIsagent(isAgent);
			 updatePayment.setBizid(businessId);
			 orderPayment.setParentid(userRecord.getInvite());
		}else{ //一级
			Memberagents agentsRecord=memberagentsMapper.findMemberagentsByMid(orderPayment.getTmid());
		
			if(null!=agentsRecord){
				 businessId=agentsRecord.getBelongid();
			}else{
				businessId=0;
			}
			updatePayment.setBizid(businessId);
		}
		
		updatePayment.setPstatus(pstatus);
		//更新交易号
		updatePayment.setPtransno(ptransno);
		int c=memberpaymentMapper.updateByPrimaryKeySelective(updatePayment);
		if(paymentStatus==0&&c>0){
			//单用户充值限制
            //金币日志
			Map<String, Object> goldMap=gameService.updateGold(orderPayment.getTmid(),orderPayment.getPcoins(),AppConstants.GoldLogSourceType.BUY);
			//平台限制
			//首次充值
			//当日充值
			//充值日表
			// 开服充值特惠
			//增加商务收入
		}
		
		return c;
	}

	@Override
	public Memberbusiness findMemberbusinessByMid(Integer mid) {
		return  null;
		//memberbusinessMapper.selectByPrimaryKey(mid);
	}



}
