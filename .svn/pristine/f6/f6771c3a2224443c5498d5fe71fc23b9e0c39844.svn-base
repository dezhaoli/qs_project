package com.qs.webside.member.service.impl;

import java.util.HashMap;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSON;
import com.qs.common.constant.AppConstants;
import com.qs.common.constant.CommonContants;
import com.qs.common.util.CommonUtils;
import com.qs.common.util.DateUtil;
import com.qs.common.util.SocketPacketUtil;
import com.qs.log.game.service.GameRecordService;
import com.qs.webside.game.service.GameService;
import com.qs.webside.member.mapper.CommongameMapper;
import com.qs.webside.member.mapper.GameMapper;
import com.qs.webside.member.mapper.MemberfidesMapper;
import com.qs.webside.member.mapper.MemberpaymentMapper;
import com.qs.webside.member.mapper.MembersMapper;
import com.qs.webside.member.model.Commongame;
import com.qs.webside.member.model.Memberagents;
import com.qs.webside.member.model.Memberfides;
import com.qs.webside.member.service.MemberService;
import com.qs.webside.member.service.NoticeService;

import net.rubyeye.xmemcached.MemcachedClient;


@Service("noticeService")
public class NoticeServiceImpl implements NoticeService {
	
    Logger log = Logger.getLogger(NoticeServiceImpl.class);  

	@Autowired
	private MemberService memberService;
	

	
    @Value("${game.hostport}")
    private String hostPort;
    
    @Value("${game.goldport}")
    private int goldPort;
    
	
	/**
	 *	邀请绑定
	 * @param mid 被邀请者
	 * @param inviteMid 邀请者
	 */
	@Override
	public int saveInviteBind(int mid, int inviteMid) {
		// TODO Auto-generated method stub
		mid=Math.max(0, mid);
		inviteMid=Math.max(0, inviteMid);
		if(mid==0||inviteMid==0){
			return  AppConstants.Result.FAILURE;
		}
		if(mid==inviteMid){
			return AppConstants.Result.FAILURE_1003;
		}
		
		Memberfides midUser=memberService.findMemberfidesById(mid);
		if(null==midUser){
			return AppConstants.Result.FAILURE_1002;
		}
        //已经存在邀请者
		if(CommonUtils.checkIntegerNull(midUser.getInvite())>0){
			return AppConstants.Result.FAILURE_1002;
		}
		
		Memberfides inviteUser=memberService.findMemberfidesById(inviteMid);
		if(null==inviteUser){
			return AppConstants.Result.FAILURE_1005;
		}
		//非代理商不可被绑定
		 Memberagents inviteAgents=memberService.findMemberagentsByMid(inviteMid);
		 if(null==inviteAgents){
			 return AppConstants.Result.FAILURE_1006;
		 }
		//顶级代理商不能绑定人
		 Memberagents agents=memberService.findMemberagentsByMid(mid);
		 if(null!=agents&&agents.getParentId()==0){
			 return AppConstants.Result.FAILURE_1007;
		 }
		//绑定
		 Memberfides mUser=memberService.findMemberfidesById(mid);
		 if(null==mUser){
			 return AppConstants.Result.FAILURE_1004;
		 }
		 if(null!=mUser){
			 mUser.setInvite(inviteMid);
			 mUser.setBindtime(DateUtil.currentTimeToInt());
		 }
		 
		 int c=memberService.updateMemberfides(mUser);
		//添加绑定人数
		
		return AppConstants.Result.FAILURE;
	}
    
	@Override
	public Map<String, Object> updateGold(int mid, int gold, int goldLogType) {
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		int cmd=1001;
		byte action = 0;
		if(Math.max(0, mid)==0){
			 map.put(CommonContants.RESULT,Boolean.FALSE);
			 map.put("errcode",AppConstants.Result.FAILURE);
			 return  map;
		}
		if(Math.abs(gold) > 2000000000){//不能超过21亿
			 map.put(CommonContants.RESULT,Boolean.FALSE);
			 map.put("errcode",AppConstants.Result.FAILURE_1002);
			 return  map;
		}	
		Commongame goldCommongam=memberService.findCommongameById(mid);
		//不能减成负
		if(goldCommongam.getGold()+gold<0){
			 map.put(CommonContants.RESULT,Boolean.FALSE);
			 map.put("errcode",AppConstants.Result.FAILURE_1003);
			return  map;
		}
		
		int flag=0;
		Long totalGold=gold+goldCommongam.getGold();
		goldCommongam.setGold(totalGold);
		int r=memberService.updateCommongame(goldCommongam);
		SocketPacketUtil socketUtil=new SocketPacketUtil(hostPort,goldPort);
		
		 Map<String, Object> jsonMsgMap = new HashMap<String, Object>();
		 jsonMsgMap.put("type", 1);
		 jsonMsgMap.put("msg", totalGold);
	     String jsonMsg=JSON.toJSONString(jsonMsgMap);
		 socketUtil.sendData(10008, mid, jsonMsg);
		 socketUtil.close();
		 if(flag==0){
			 //更新金币日志
			// gameRecordService.saveGoldLog(mid, gold, totalGold, (byte)goldLogType, action);
		 }
		
		 map.put(CommonContants.RESULT,Boolean.TRUE);
		 map.put("totalGold",totalGold);
		 
		 return map;
	}


}
