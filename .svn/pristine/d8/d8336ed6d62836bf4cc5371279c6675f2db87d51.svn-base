<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

<!-- 	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<value>classpath:init.properties</value>
		</property>
	</bean> --> 
	
	<!--系统能够识别相应的注解-->
	<context:annotation-config />
	
	<!-- webside的数据源 -->
	<bean id="websideDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${webside.url}" />
		<property name="username" value="${webside.username}" />
		<property name="password" value="${webside.password}" />
		<property name="connectionProperties" value="${webside.datasource.driverClassName}"></property>

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat,log4j" />
	</bean>
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
			<property name="dataSource">
			<ref local="websideDataSource" />
			</property>
	</bean>
	
	<bean id="websideSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="websideDataSource" />
		
				<!-- mybatis 设置 -->
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<!-- 匹配Mapper映射文件 -->
		<property name="mapperLocations" value="classpath:mybatis/mapper/webside/**/*.xml" />
		
<!-- 		<property name="typeAliasesPackage" value="com.qs.webside.*.model" />
		 <property name="configLocation">  
       		 <value>classpath:MybatisConfig.xml</value>  
   		 </property>   -->
	</bean>
	
	<bean id="websidesqlSession" class="org.mybatis.spring.SqlSessionTemplate">  
        <constructor-arg index="0" ref="websideSqlSessionFactory"/>  
    </bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="websideSqlSessionFactory"/>
		<property name="basePackage" value="com.qs.webside.**.mapper"/>
	</bean>
	
	<bean id="websideTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="websideDataSource" />
		<qualifier value="webside" />
	</bean>
	
	 <bean id="websideTxInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="websideTransactionManager"/>
		<property name="transactionAttributes">
			<props>
				<prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="save*">PROPAGATION_REQUIRED</prop>
				<prop key="add*">PROPAGATION_REQUIRED</prop>
				<prop key="insert*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="delete*">PROPAGATION_REQUIRED</prop>
				<prop key="execute*">PROPAGATION_REQUIRED</prop>
				<prop key="invoke*">PROPAGATION_NEVER</prop>
			</props>
		</property>
	</bean>
	
	<bean id="websideAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="interceptorNames" value="websideTxInterceptor"/>
		<property name="beanNames">
			<list>
				<value>*ServiceImpl</value>
			</list>
		</property>
	</bean>
	

<!-- 	<tx:annotation-driven transaction-manager="websideTransactionManager" /> -->

		<!-- 配置数据源 -->
	<bean id="cfgDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${cfg.url}" />
		<property name="username" value="${cfg.username}" />
		<property name="password" value="${cfg.password}" />
		<property name="connectionProperties" value="${cfg.datasource.driverClassName}"></property>

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat,log4j" />
	</bean>
	
	<bean id="cfgSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="cfgDataSource" />
		<!-- mybatis 设置 -->
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<!-- 匹配Mapper映射文件 -->
		<property name="mapperLocations" value="classpath:mybatis/mapper/cfg/**/*.xml" />
	   <!-- 	
	    <property name="typeAliasesPackage" value="com.wiseyq.cfg.*.model" />
		<property name="configLocation">  
       		 <value>classpath:MybatisConfig.xml</value>  
   		 </property>  
   	   -->
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="cfgSqlSessionFactory"/>
	    <property name="basePackage" value="com.qs.cfg.**.mapper"/>
	</bean>
	
	<bean id="cfgTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="cfgDataSource" />
		<qualifier value="cfg" />
	</bean>
	
		<bean id="cfgTxInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="cfgTransactionManager"/>
		<property name="transactionAttributes">
			<props>
				<prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="save*">PROPAGATION_REQUIRED</prop>
				<prop key="add*">PROPAGATION_REQUIRED</prop>
				<prop key="insert*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="delete*">PROPAGATION_REQUIRED</prop>
				<prop key="execute*">PROPAGATION_REQUIRED</prop>
				<prop key="invoke*">PROPAGATION_NEVER</prop>
			</props>
		</property>
	</bean>
	
	<bean id="cfgAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="interceptorNames" value="cfgTxInterceptor"/>
		<property name="beanNames">
			<list>
				<value>*ServiceImpl</value>
			</list>
		</property>
	</bean>

	<!-- <tx:annotation-driven transaction-manager="cfgTransactionManager" />
	 -->
	 
	 <!-- 配置数据源 -->
	<bean id="logDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${log.url}" />
		<property name="username" value="${log.username}" />
		<property name="password" value="${log.password}" />
		<property name="connectionProperties" value="${log.datasource.driverClassName}"></property>

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat,log4j" />
	</bean>
	
	<bean id="logSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource" />
		<!-- mybatis 设置 -->
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<!-- 匹配Mapper映射文件 -->
		<property name="mapperLocations" value="classpath:mybatis/mapper/log/**/*.xml" />
	   <!-- 	
	    <property name="typeAliasesPackage" value="com.wiseyq.log.*.model" />
		<property name="configLocation">  
       		 <value>classpath:MybatisConfig.xml</value>  
   		 </property>  
   	   -->
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="logSqlSessionFactory"/>
	    <property name="basePackage" value="com.qs.log.**.mapper"/>
	</bean>
	
	<bean id="logTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="logDataSource" />
		<qualifier value="log" />
	</bean>
	
		<bean id="logTxInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="logTransactionManager"/>
		<property name="transactionAttributes">
			<props>
				<prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="save*">PROPAGATION_REQUIRED</prop>
				<prop key="add*">PROPAGATION_REQUIRED</prop>
				<prop key="insert*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="delete*">PROPAGATION_REQUIRED</prop>
				<prop key="execute*">PROPAGATION_REQUIRED</prop>
				<prop key="invoke*">PROPAGATION_NEVER</prop>
			</props>
		</property>
	</bean>
	
	<bean id="logAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="interceptorNames" value="logTxInterceptor"/>
		<property name="beanNames">
			<list>
				<value>*ServiceImpl</value>
			</list>
		</property>
	</bean>

	<!-- <tx:annotation-driven transaction-manager="logTransactionManager" />
	 -->
<!-- pub的数据源 -->
	<bean id="pubDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		  init-method="init" destroy-method="close">
		<property name="url" value="${pub.url}" />
		<property name="username" value="${pub.username}" />
		<property name="password" value="${pub.password}" />
		<property name="connectionProperties" value="${pub.datasource.driverClassName}"/>

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
				  value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat,log4j" />
	</bean>

	<!--<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref local="pubDataSource" />
		</property>
	</bean>-->

	<bean id="pubSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="pubDataSource" />

		<!-- mybatis 设置 -->
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<!-- 匹配Mapper映射文件 -->
		<property name="mapperLocations" value="classpath:mybatis/mapper/pub/**/*.xml" />

		<!-- 		<property name="typeAliasesPackage" value="com.qs.pub.*.model" />
                 <property name="configLocation">
                        <value>classpath:MybatisConfig.xml</value>
                    </property>   -->
	</bean>

	<bean id="pubSqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="pubSqlSessionFactory"/>
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="pubSqlSessionFactory"/>
		<property name="basePackage" value="com.qs.pub.*.mapper"/>
	</bean>

	<bean id="pubTransactionManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="pubDataSource" />
		<qualifier value="pub" />
	</bean>

	<bean id="pubTxInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="pubTransactionManager"/>
		<property name="transactionAttributes">
			<props>
				<prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="save*">PROPAGATION_REQUIRED</prop>
				<prop key="add*">PROPAGATION_REQUIRED</prop>
				<prop key="insert*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="delete*">PROPAGATION_REQUIRED</prop>
				<prop key="execute*">PROPAGATION_REQUIRED</prop>
				<prop key="invoke*">PROPAGATION_NEVER</prop>
			</props>
		</property>
	</bean>

	<bean id="pubAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="interceptorNames" value="pubTxInterceptor"/>
		<property name="beanNames">
			<list>
				<value>*ServiceImpl</value>
			</list>
		</property>
	</bean>
	
</beans>
