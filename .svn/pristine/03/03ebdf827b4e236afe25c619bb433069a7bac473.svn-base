package com.qs.webside.sys.service.agent.service.impl;

import com.qs.common.util.DateUtil;
import com.qs.common.util.ID;
import com.qs.webside.member.mapper.MemberBusinessMapper;
import com.qs.webside.member.model.MemberBusiness;
import com.qs.webside.member.model.MemberBusinessDto;
import com.qs.webside.sys.service.agent.service.IBusinessService;
import org.apache.shiro.crypto.hash.Md5Hash;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Created by zun.wei on 2017/3/8.
 * To change this template use File|Default Setting
 * |Editor|File and Code Templates|Includes|File Header
 */
@Service
public class BusinessServiceImpl implements IBusinessService {

    @Resource
    private MemberBusinessMapper memberBusinessMapper;


    @Override
    public List<Map<String, Object>> queryListMapByPage(Map<String, Object> parameter) {
        return memberBusinessMapper.queryListMapByPage(parameter);
    }

    @Override
    public int add(MemberBusinessDto memberBusinessDto) {
        //TODO还需要处理account 是邮箱还是手机号  salt
        //TODO添加的时候需要验证新添加的账号是否已经存在。memberbusiness表中的手机
        if (memberBusinessDto != null && memberBusinessDto.getAccount() != null) {
            String account = memberBusinessDto.getAccount();
            String regExPhone = "^((13[0-9])|(15[^4])|(18[0,2,3,5-9])|(17[0-8])|(147))\\d{8}$";
            Pattern pattern = Pattern.compile(regExPhone);
            Matcher matcher = pattern.matcher(account);
            boolean rs = matcher.find();
            String regExEmail = "\t^[a-zA-Z_]{1,}[0-9]{0,}@(([a-zA-z0-9]-*){1,}\\.){1,3}[a-zA-z\\-]{1,}$";
            Pattern patternEmail = Pattern.compile(regExEmail);
            Matcher matcherEmail = patternEmail.matcher(account);
            boolean rsEmail = matcherEmail.find();
            if (rs) {//如果匹配为手机号码，则检查是否绑定过。
                MemberBusiness mb = loadByPhone(memberBusinessDto.getAccount());
                if (mb != null) return -100;//手机号码已绑定
                if (memberBusinessDto.getConfirmPwd()
                        .equals(memberBusinessDto.getPassWord())) {//表示未被绑定,校验密码相等
                    String uuId = ID.generateUUID();
                    String passwordCryto = new Md5Hash(memberBusinessDto.getPassWord()
                            ,uuId,2).toBase64();
                    MemberBusiness memberBusiness = new MemberBusiness();
                    memberBusiness.setCompany(memberBusinessDto.getCompany());//公司代码
                    memberBusiness.setName(memberBusinessDto.getName());//真实姓名
                    memberBusiness.setPhone(memberBusinessDto.getAccount());//手机号码
                    //memberBusiness.setEmail("sdfdsaf");
                    memberBusiness.setSalt(uuId);//盐值
                    memberBusiness.setPasswd(passwordCryto);//加密后的密码
                    memberBusiness.setRemark(memberBusinessDto.getRemark());//备注
                    memberBusiness.setMktime(DateUtil.convertToInt(new SimpleDateFormat
                            ("yyyy-MM-dd HH:mm:ss").format(System.currentTimeMillis())));//创建时间
                    return memberBusinessMapper.insertSelective(memberBusiness);
                }
            }
            if (rsEmail) {//如果匹配邮箱
                if (memberBusinessDto.getConfirmPwd().equals(memberBusinessDto.getPassWord())) {//校验密码相等
                    String uuId = ID.generateUUID();
                    String passwordCryto = new Md5Hash(memberBusinessDto.getPassWord()
                            ,uuId,2).toBase64();
                    MemberBusiness memberBusiness = new MemberBusiness();
                    memberBusiness.setCompany(memberBusinessDto.getCompany());//公司代码
                    memberBusiness.setName(memberBusinessDto.getName());//真实姓名
                    //memberBusiness.setPhone();//手机号码
                    memberBusiness.setEmail(memberBusinessDto.getAccount());//邮箱
                    memberBusiness.setSalt(uuId);//盐值
                    memberBusiness.setPasswd(passwordCryto);//加密后的密码
                    memberBusiness.setRemark(memberBusinessDto.getRemark());//备注
                    memberBusiness.setMktime(DateUtil.convertToInt(new SimpleDateFormat
                            ("yyyy-MM-dd HH:mm:ss").format(System.currentTimeMillis())));//创建时间
                    return memberBusinessMapper.insertSelective(memberBusiness);
                }
            }
            if (rs && rsEmail) {
                //两个都匹配，异常
                return 0;
            }
        }
        return 0;
    }

    @Override
    public MemberBusiness loadByPhone(String phone) {
        return memberBusinessMapper.loadByPhone(phone);
    }

    @Override
    public MemberBusiness selectById(Integer id) {
        return memberBusinessMapper.selectByPrimaryKey(id);
    }

    @Override
    public int udpatePhoneById(Integer id,String phone) {
        if (phone != null && memberBusinessMapper.loadByPhone(phone) == null) {
            MemberBusiness memberBusiness = new MemberBusiness();
            memberBusiness.setId(id);
            memberBusiness.setPhone(phone);
            return memberBusinessMapper.updateByPrimaryKeySelective(memberBusiness);
        } else if (phone != null && memberBusinessMapper.loadByPhone(phone) == null) {
            return -100;
        }
        return 0;
    }

    @Override
    public int updatePassWordById(Integer agentId, String password,String confirmPwd) {
        if (password != null && password.equals(confirmPwd)) {
            MemberBusiness memberBusiness = new MemberBusiness();
            String uuId = ID.generateUUID();
            String passwordCryto = new Md5Hash(password,uuId,2).toBase64();
            memberBusiness.setPasswd(passwordCryto);
            memberBusiness.setSalt(uuId);
            memberBusiness.setId(agentId);
            return memberBusinessMapper.updateByPrimaryKeySelective(memberBusiness);
        }
        return 0;
    }

}
