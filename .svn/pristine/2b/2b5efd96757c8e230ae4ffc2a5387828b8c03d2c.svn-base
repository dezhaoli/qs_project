package com.qs.common.util;

import com.alibaba.fastjson.JSON;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by zun.wei on 2017/3/3.
 * To change this template use File|Default Setting
 * |Editor|File and Code Templates|Includes|File Header
 */
public class SocketPacket {

    private static final Integer PACKET_BUFFER_SIZE = 8192;
    private static final Integer PACKET_HEADER_SIZE = 6;

    private StringBuffer packetBuffer;
    private Integer packetSize;
    private Integer cmdType;
    private String checkCode;
    private StringBuffer content = new StringBuffer("");
    private List<byte[]> contentByteList = new ArrayList<byte[]>();

    //private $packetBuffer;
    //private $packetSize;
    //private $m_CmdType;
    //private $m_cbCheckCode;

    /**
     * 将int转为低字节在前，高字节在后的byte数组
     */
    private static byte[] toLH(int n) {
        byte[] b = new byte[4];
        b[0] = (byte) (n & 0xff);
        b[1] = (byte) (n >> 8 & 0xff);
        b[2] = (byte) (n >> 16 & 0xff);
        b[3] = (byte) (n >> 24 & 0xff);
        return b;
    }

    private static byte[] toLH2(int n) {
        byte[] b = new byte[2];

        b[0] = (byte) (n & 0xff);
        b[1] = (byte) (n >> 8 & 0xff);
        System.out.println(n);
        return b;
    }

    public SocketPacket() {
        this.packetSize = 0;
        this.packetBuffer = new StringBuffer("");
    }

    public void writeBegin(Integer cmdType) {
        this.cmdType = cmdType;
    }

    public void writeEnd() {
        //content.append("QS");
        byte[] a = new byte[6 + this.packetSize];
        a[0] = 'Q';
        a[1] = 'S';
        a[2] = (byte) (this.packetSize & 0xff);
        a[3] = (byte) (this.packetSize >> 8 & 0xff);
        a[4] = (byte) (this.cmdType & 0xff);
        a[5] = (byte) (this.cmdType >> 8 & 0xff);
        int i = 6;
        for (byte[] bArr : contentByteList) {
            for (byte bt : bArr) {
                a[i] = bt;
                i++;
            }
        }
        //byte[] b=new byte[12];
        content.append(StrBinaryTurn.bytesToHexString(a));
        //content.append(toLH2(this.cmdType));
        //content.append(packetBuffer);
        packetBuffer = content;

        //packetBuffer.append(content);
        //$content .= pack("s", $this->packetSize);			//len
        //$content .= pack("s", $this->m_CmdType);			//cmd
        //$this->packetBuffer = $content . $this->packetBuffer;
    }

    /**
     *
     * @param mid
     */
    public void writeInt(Integer mid) {

        this.contentByteList.add(toLH(mid));
        //this.packetBuffer.append(value);
        this.packetSize += 4;
        //$this->packetBuffer .= pack("i", $value);
        //$this->packetSize += 4;
    }

    public StringBuffer getPacketBuffer() {
        return this.packetBuffer;
    }

    public Integer getPacketSize() {
        return this.packetSize;
    }

    /**
     * 实现方法可以先放到map，然后再转json。
     * 如：map.put("type",4),map.put("msg",0)
     * @param jsonMsg json格式的消息
     */
    public void writeString(String jsonMsg) {
        jsonMsg += '\0';
        Integer len = jsonMsg.length();

        this.contentByteList.add(toLH(len));
        this.contentByteList.add(jsonMsg.getBytes());
        this.packetSize += len + 4;
//
//        this.packetBuffer.append(len);
//        this.packetBuffer.append(value);
//        this.packetBuffer.append(0);


        //$len = strlen($value)+1;
        //$this->packetBuffer .= pack("i", $len);
        //$this->packetBuffer .= $value;
        //$this->packetBuffer .= pack("C", 0);
        //$this->packetSize += $len+4;
    }

    public static String getSendMailContent(Integer mapType, Integer mapMsg, Integer cmdType
            , Integer mid) {

        if (mid == null) mid = 0;
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("type", mapType);
        map.put("msg", mapMsg);
        SocketPacket socketPacket = new SocketPacket();
        socketPacket.writeBegin(cmdType);
        socketPacket.writeInt(mid);
        socketPacket.writeString(JSON.toJSONString(map));
        socketPacket.writeEnd();
        StringBuffer stringBuffer = socketPacket.getPacketBuffer();
        //System.out.println("stringBuffer = " + stringBuffer.toString());
        return stringBuffer.toString();
    }

   /* public static void main(String[] args) {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("type", 3);
        map.put("msg", 0);
        SocketPacket socketPacket = new SocketPacket();
        socketPacket.writeBegin(10008);
        socketPacket.writeInt(0);
        socketPacket.writeString(JSON.toJSONString(map));
        socketPacket.writeEnd();
        StringBuffer stringBuffer = socketPacket.getPacketBuffer();
        System.out.println("stringBuffer = " + stringBuffer.toString());
        //System.out.println("stringBuffer = " + StrBinaryTurn.bytesToHexString(stringBuffer.toString().getBytes()));
    }*/


}
