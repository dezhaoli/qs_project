package com.qs.webside.agent.service.impl;

import com.qs.common.constant.CommonContants;
import com.qs.common.util.ID;
import com.qs.log.game.service.ITaxesInviteService;
import com.qs.webside.agent.service.IAgentMidsServcie;
import com.qs.webside.agent.service.IMemberAgentService;
import com.qs.webside.member.mapper.MemberAgentsMapper;
import com.qs.webside.member.model.AgentMids;
import com.qs.webside.member.model.MemberAgents;
import org.apache.shiro.crypto.hash.Md5Hash;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Created by zun.wei on 2017/3/8.
 * To change this template use File|Default Setting
 * |Editor|File and Code Templates|Includes|File Header
 */
@Service
public class MemberAgentServiceImpl implements IMemberAgentService {

    @Resource
    private MemberAgentsMapper memberAgentsMapper;

    @Autowired
    private ITaxesInviteService taxesInviteService;
    

	@Autowired
	private IAgentMidsServcie agentMidsServcie;
    
    @Override
    public int deleteByPrimaryKey(Integer id) {
        return memberAgentsMapper.deleteByPrimaryKey(id);
    }

    @Override
    public int insert(MemberAgents record) {
        return memberAgentsMapper.insert(record);
    }

    @Override
    public int insertSelective(MemberAgents record) {
        return memberAgentsMapper.insertSelective(record);
    }

    @Override
    public MemberAgents selectByPrimaryKey(Integer id) {
        return memberAgentsMapper.selectByPrimaryKey(id);
    }

    
    @Override
    public int updateByPrimaryKeySelective(MemberAgents record) {
        return memberAgentsMapper.updateByPrimaryKeySelective(record);
    }

    @Override
    public int updateByPrimaryKey(MemberAgents record) {
        return memberAgentsMapper.updateByPrimaryKey(record);
    }

    @Override
    public List<MemberAgents> queryListByPage(Map<String, Object> parameters) {
        return memberAgentsMapper.queryListByPage(parameters);
    }

    @Override
    public int editScale(Integer id, Integer mid, Byte scale, String remark) {
        MemberAgents memberAgents = new MemberAgents();
        memberAgents.setId(id);
        memberAgents.setMid(mid);
        memberAgents.setRemark(remark);
        memberAgents.setScale(scale);
        return memberAgentsMapper.updateByPrimaryKeySelective(memberAgents);
    }

    @Override
    public int resetPwd(Integer id) {
        MemberAgents memberAgents = new MemberAgents();
        /*int max = 99999999;
        int min = 10000000;
        Random random = new Random();
        int randomNum = random.nextInt(max)%(max-min+1) + min;*/
        String randomNum = "66668888";
        String uuId = ID.generateUUID();
        String passwordCryto = new Md5Hash(randomNum,uuId,2).toBase64();
        //memberAgents.setSystempasswd(randomNum + "");//明文密码
        memberAgents.setId(id);
        memberAgents.setPasswd(passwordCryto);//加密的密码
        memberAgents.setSalt(uuId);//盐值
        return memberAgentsMapper.updateByPrimaryKeySelective(memberAgents);
    }

	@Override
	public MemberAgents getMemberAgentsInfoBySitemid(String sitemid) {
		return memberAgentsMapper.getMemberAgentsInfoBySitemid(sitemid);
	}


	@Override
	public Map<String, Integer> getTaxesInviteMapper(Map<String, Object> param) {
		
		return taxesInviteService.getPayTempInviteCountByTime(param);
	}

	@Override
	public List<MemberAgents> getMemberAgentsInfoByParentId(String parentId) {
		return memberAgentsMapper.getMemberAgentsInfoByParentId(parentId);
	}
    @Override
    public MemberAgents selectByMid(Integer mid) {
        return memberAgentsMapper.selectByMid(mid);
    }

    @Override
    public Map<String, Object> getAgentInfoAndBizInfoByMid(Integer mid) {
        return memberAgentsMapper.getAgentInfoAndBizInfoByMid(mid);
    }

    @Override
    public Map<String, Object> queryFirstAgentCountByBelongId(Integer belongid) {
        return memberAgentsMapper.queryFirstAgentCountByBelongId(belongid);
    }

    @Override
    public List<Map<String, Object>> queryFirstAgentByBelongIdPage(Map<String, Object> belongid) {
        return memberAgentsMapper.queryFirstAgentByBelongIdPage(belongid);
    }

    @Override
    public Map<String, Object> getAgentBusinessInfoByMid(Integer mid) {
        return memberAgentsMapper.getAgentBusinessInfoByMid(mid);
    }

    @Override
    public String getAgentRealNameByMid(Integer mid) {
        return memberAgentsMapper.getAgentRealNameByMid(mid);
    }

    @Override
    public Integer getChildrenAgentsCount(Map<String, Object> firstMidBelongId) {
        return memberAgentsMapper.getChildrenAgentsCount(firstMidBelongId);
    }

    @Override
    public List<Map<String, Object>> getChildrenAgentsList(Map<String, Object> firstMidBelongId) {
        return memberAgentsMapper.getChildrenAgentsList(firstMidBelongId);
    }

    @Override
    public MemberAgents findByBelongidAndMid(Map<String, Object> parameters) {
        return memberAgentsMapper.findByBelongidAndMid(parameters);
    }

    @Override
    public Map<String, Object> getAgentAndBusizInfoByMid(Integer mid) {
        return memberAgentsMapper.getAgentAndBusizInfoByMid(mid);
    }

    @Override
    public String getFirstAgentCode() {
        return memberAgentsMapper.getFirstAgentCode();
    }

    @Override
	public List<MemberAgents> selectVipDirectlyInfo(Map<String, Object> paramters) {
		List<MemberAgents> mbList=new ArrayList<MemberAgents> ();
		if (!paramters.containsKey("type"))paramters.put("type", CommonContants.TYPE_VIP);
		
		mbList=memberAgentsMapper.selectVipDirectlyInfo(paramters);
		
		if (mbList !=null) {
			for (MemberAgents memberAgents : mbList) {
				
				AgentMids agentMids= agentMidsServcie.selectByMid(memberAgents.getMid());
				if (agentMids !=null) memberAgents.setOpenRoom("1"); else memberAgents.setOpenRoom("2");
			}
		}
		return mbList;
	}


}
