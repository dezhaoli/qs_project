<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


    <!-- 配置广东麻将代理库数据源 -->
    <bean id="qianmajiangAgentDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${qianmajiangAgent.url}" />
        <property name="username" value="${qianmajiangAgent.username}" />
        <property name="password" value="${qianmajiangAgent.password}" />
        <property name="connectionProperties" value="${qianmajiangAgent.datasource.driverClassName}"></property>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat,log4j" />
    </bean>

    <bean id="qianmajiangAgentSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="mainDynamicDataSource" />
        <!-- mybatis 设置 -->
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
        <!-- 匹配Mapper映射文件 -->
        <property name="mapperLocations" value="classpath:mybatis/mapper/agent/**/*.xml" />
        <!--
         <property name="typeAliasesPackage" value="com.wiseyq.agent.*.model" />
         <property name="configLocation">
                 <value>classpath:MybatisConfig.xml</value>
             </property>
           -->
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="qianmajiangAgentSqlSessionFactory"/>
        <property name="basePackage" value="com.qs.agent.**.mapper"/>
    </bean>

    <bean id="qianmajiangAgentTransactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="mainDynamicDataSource" />
        <qualifier value="qianmajiangAgent" />
    </bean>

    <bean id="qianmajiangAgentTxInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="qianmajiangAgentTransactionManager"/>
        <property name="transactionAttributes">
            <props>
                <prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
                <prop key="get*">PROPAGATION_REQUIRED</prop>
                <prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
                <prop key="save*">PROPAGATION_REQUIRED</prop>
                <prop key="add*">PROPAGATION_REQUIRED</prop>
                <prop key="insert*">PROPAGATION_REQUIRED</prop>
                <prop key="update*">PROPAGATION_REQUIRED</prop>
                <prop key="delete*">PROPAGATION_REQUIRED</prop>
                <prop key="execute*">PROPAGATION_REQUIRED</prop>
                <prop key="invoke*">PROPAGATION_NEVER</prop>
            </props>
        </property>
    </bean>

    <bean id="qianmajiangAgentAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="interceptorNames" value="qianmajiangAgentTxInterceptor"/>
        <property name="beanNames">
            <list>
                <value>*Service</value>
            </list>
        </property>
    </bean>

    <!-- <tx:annotation-driven transaction-manager="majiangAgentTransactionManager" />
     -->


    <!-- 配置麻将日志库数据源 -->
    <bean id="qianmajiangLogDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${qianmajiangLog.url}" />
        <property name="username" value="${qianmajiangLog.username}" />
        <property name="password" value="${qianmajiangLog.password}" />
        <property name="connectionProperties" value="${qianmajiangLog.datasource.driverClassName}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat,log4j" />
    </bean>

    <bean id="qianmajiangLogSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="logDynamicDataSource" />
        <!-- mybatis 设置 -->
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
        <!-- 匹配Mapper映射文件 -->
        <property name="mapperLocations" value="classpath:mybatis/mapper/log/**/*.xml" />
        <!--
         <property name="typeAliasesPackage" value="com.wiseyq.log.*.model" />
         <property name="configLocation">
                 <value>classpath:MybatisConfig.xml</value>
             </property>
           -->
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="qianmajiangLogSqlSessionFactory"/>
        <property name="basePackage" value="com.qs.log.**.mapper"/>
    </bean>

    <bean id="qianmajiangLogTransactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="logDynamicDataSource" />
        <qualifier value="qianmajiangLog" />
    </bean>

    <bean id="qianmajiangLogTxInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="qianmajiangLogTransactionManager"/>
        <property name="transactionAttributes">
            <props>
                <prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
                <prop key="get*">PROPAGATION_REQUIRED</prop>
                <prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
                <prop key="save*">PROPAGATION_REQUIRED</prop>
                <prop key="add*">PROPAGATION_REQUIRED</prop>
                <prop key="insert*">PROPAGATION_REQUIRED</prop>
                <prop key="update*">PROPAGATION_REQUIRED</prop>
                <prop key="delete*">PROPAGATION_REQUIRED</prop>
                <prop key="execute*">PROPAGATION_REQUIRED</prop>
                <prop key="invoke*">PROPAGATION_NEVER</prop>
            </props>
        </property>
    </bean>

    <bean id="qianmajiangLogAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="interceptorNames" value="qianmajiangLogTxInterceptor"/>
        <property name="beanNames">
            <list>
                <value>*Service</value>
            </list>
        </property>
    </bean>

</beans>